<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ruby on Dan Kleiman</title>
    <link>/dankleiman.github.io/categories/ruby/index.xml</link>
    <description>Recent content in ruby on Dan Kleiman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/dankleiman.github.io/categories/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Nice Try, NilClass</title>
      <link>/dankleiman.github.io/2016/04/10/nice-try-nilclass</link>
      <pubDate>Sun, 10 Apr 2016 07:13:27 -0400</pubDate>
      
      <guid>/dankleiman.github.io/2016/04/10/nice-try-nilclass</guid>
      <description>

&lt;p&gt;I love that feeling when a new concept starts to come together in your mind and you can point to all the converging sources of insight.&lt;/p&gt;

&lt;p&gt;Right now, I can&amp;rsquo;t tell if I&amp;rsquo;m fooling myself, hiding some logic, or making my code more readable with this particular concept, but when I put together these three pieces of information, I think I start to see something emerge.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been inspired to do some more digging into these kinds of questions lately thanks to the awesome new &lt;a href=&#34;http://rubybookclub.com/&#34;&gt;Ruby Book Club Podcast&lt;/a&gt;. Co-hosts &lt;a href=&#34;http://twitter.com/nodunayo&#34;&gt;Nadia Odunayo&lt;/a&gt; and &lt;a href=&#34;http://twitter.com/saronyitbarek&#34;&gt;Saron Yitbarek&lt;/a&gt; are leading us chapter-by-chapter through different Ruby books and sharing their thoughts on the podcast as they go.&lt;/p&gt;

&lt;p&gt;This week, specifically, I came across:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Damir Svrtan&amp;rsquo;s article about &lt;a href=&#34;https://infinum.co/the-capsized-eight/articles/whitelisting-with-the-lesser-known-presence-in-method&#34;&gt;whitelisting input with #presence_in in Rails&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.confidentruby.com/&#34;&gt;Avdi Grimm&amp;rsquo;s Confident Ruby&lt;/a&gt; where #fetch is used to pull data out of hash.&lt;/li&gt;
&lt;li&gt;A work situation, we were cleaning up #present? checks on incoming params input using #presence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I still don&amp;rsquo;t know exactly what to call this collection of methods, but they all feel very related to me. They all remind me of &lt;a href=&#34;http://apidock.com/rails/v4.2.1/Object/try&#34;&gt;#try&lt;/a&gt;, which makes me nervous.&lt;/p&gt;

&lt;p&gt;Using #try always feels like a little bit of a crutch, where you don&amp;rsquo;t quite know what inputs you are expecting or haven&amp;rsquo;t coded thoroughly to all your cases, but in Rails, #try swallows some of the errors you would have run into and returns nil instead.&lt;/p&gt;

&lt;p&gt;With these three methods, we&amp;rsquo;re doing something similar. In each case, we get a simple way to check for a value and handle missing values gracefully with defaults, moving forward if the value is present.&lt;/p&gt;

&lt;p&gt;So, for #presence, instead of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
params[:name].blank? ? params[:name] : nil

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
params[:name].presence

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For whitelisting, instead of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
if params[:name].present? &amp;amp;&amp;amp; %w(foo bar).include?(params[:name])
  params[:name]
else
  nil
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use #presence_in like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
params[:name].presence_in %w(foo bar)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, with #fetch, the only Ruby standard library method in this group (the rest come from Rails), you have a few different options. Lifted straight from &lt;a href=&#34;http://ruby-doc.org/core-2.2.0/Hash.html#method-i-fetch&#34;&gt;the docs&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
h = { &amp;quot;a&amp;quot; =&amp;gt; 100, &amp;quot;b&amp;quot; =&amp;gt; 200 }
h.fetch(&amp;quot;a&amp;quot;)                            #=&amp;gt; 100
h.fetch(&amp;quot;z&amp;quot;, &amp;quot;go fish&amp;quot;)                 #=&amp;gt; &amp;quot;go fish&amp;quot;
h.fetch(&amp;quot;z&amp;quot;) { |el| &amp;quot;go fish, #{el}&amp;quot;}   #=&amp;gt; &amp;quot;go fish, z&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With #fetch, you use a key to puull a value from the hash, but you now you can define a default as your second argument, which is used to rescue missing key errors. Even better, you can execute whole block in the case that your key is not there.&lt;/p&gt;

&lt;h2 id=&#34;bonus-reading&#34;&gt;Bonus Reading&lt;/h2&gt;

&lt;p&gt;I went digging a little more because I was still feeling uneasy about #try, but I couldn&amp;rsquo;t quite articulate why. Guess who I found to say it for me? &lt;a href=&#34;http://devblog.avdi.org/2011/07/05/demeter-its-not-just-a-good-idea-its-the-law/&#34;&gt;Here&amp;rsquo;s Avdi from 2011 on Structural Coupling enabled by #try&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The seed of this all-too-common predicament is structural coupling. What’s structural coupling? To
define it, let’s start with a review of the DRY principle:&lt;/p&gt;

&lt;blockquote&gt;&#34;Every piece of knowledge must have a single, unambiguous, authoritative representation within the system.&#34;&lt;/blockquote&gt;

&lt;p&gt;It’s easy to think about DRYness just in terms of data: e.g., there should be only one place in the
system for API keys; they shouldn’t just be copy-and-pasted willy-nilly throughout the codebase. But
DRY applies equally to structural knowledge: knowledge about the composition of and relationships
between your objects.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the code we started out with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def user_info(user)
  &amp;quot;Name: #{user.name}. Dept: #{user.department.try(:name)}&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This seemingly innocuous code makes the following assumptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;user will have a name property.&lt;/li&gt;
  &lt;li&gt;user may or may not have a single department.&lt;/li&gt;
  &lt;li&gt;user&#39;s department, in turn, has a name property&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By going two levels deep into user&#39;s associations, we’ve made a structural coupling between this code and the models it works with. We’ve duplicated knowledge about a User’s associations—canonically located in the User and Department classes—in the #user_info method.&lt;/p&gt;

&lt;p&gt;&lt;p&gt;And the #try method was an enabler. By papering over the ugly user.department &amp;amp;&amp;amp; user.department.name construct we’d otherwise have had to use, #try made the coupling an easier syntactical pill to swallow.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;I highly recommend you read the whole article, as he goes into how this coupling violates the Law of Demeter and links back to &lt;a href=&#34;http://devblog.avdi.org/2011/06/28/do-or-do-not-there-is-no-try/&#34;&gt;an earlier discussion of #try&lt;/a&gt;, because, clearly, while these types of methods are cool and convenient, they make him a little uneasy too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Burlington Ruby Conference 2014</title>
      <link>/dankleiman.github.io/2014/08/03/burlington-ruby-conference-2014</link>
      <pubDate>Sun, 03 Aug 2014 06:24:53 -0400</pubDate>
      
      <guid>/dankleiman.github.io/2014/08/03/burlington-ruby-conference-2014</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s 6:23 on Sunday morning, day 2 at &lt;a href=&#34;http://burlingtonrubyconference.com/&#34;&gt;Burlington Ruby&lt;/a&gt;, so I thought I&amp;rsquo;d take a few minutes and recap some of what I saw and learned yesterday.&lt;/p&gt;

&lt;p&gt;Everyone keeps talking about what an amazing community we have in the Ruby world and I guess I&amp;rsquo;m spoiled since I don&amp;rsquo;t have any other software communities to compare it to, but I can tell you that every talk has been thoughtful, curious, and in different ways caring: caring about the future of the language, caring about other people&amp;rsquo;s growth and development, and caring even about novel, smarter, and more refined approaches to getting things done.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;In his keynote to kick off the conference, &lt;a href=&#34;http://erniemiller.org/&#34;&gt;Ernie Miller&lt;/a&gt; did a pretty amazing job capturing these core themes. I don&amp;rsquo;t know how much people realized it, but he subtly set the tone for all the other talks too, both in terms of the human side of software development, but he also gave us context for all the non-Ruby or Ruby-divergent topics people were dying to discuss. Very impressive!&lt;/p&gt;

&lt;p&gt;Here are a few of the ideas from the talks that jumped out at me.&lt;/p&gt;

&lt;h2 id=&#34;how-you-work-with-other-people&#34;&gt;How You Work with Other People&lt;/h2&gt;

&lt;p&gt;Having just come out of Launch Academy, I was really interested to hear what &lt;a href=&#34;http://jennifereliuk.com/about/&#34;&gt;Jennifer Eliuk&lt;/a&gt; had to say about apprenticeships.&lt;/p&gt;

&lt;p&gt;While her talk definitely resonanted with me and helped me see &amp;ldquo;the next step&amp;rdquo; in my coding journey, she made a strong case for the importance of apprenticeships for the community at large.&lt;/p&gt;

&lt;p&gt;Apprenticeships, for code school graduates or self-taught coders, have the potential to become a criticial rung on the software development ladder because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;companies can groom and develop their junior talent, without all of the performance pressure of the day-to-day job.&lt;/li&gt;
&lt;li&gt;mentorship and teaching becomes a rewarding way for senior developers to grow in non-technical dimensions.&lt;/li&gt;
&lt;li&gt;a teaching culture also encourages learning &amp;ndash; she cited cases where she and senior devs would tackle new technologies side by side where everyone was learning together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At Launch Academy, the staff and instructors were gradually and deliberately refining each piece of the learning process, not unlike the way they taught us to tackle complex software problems. Jennifer&amp;rsquo;s talk was a perfect example of how to more broadly apply those same principles to the question: &amp;ldquo;how do we cultivate developers.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;In fact, she argues, now that so much effort is being poured into the initial stage of learning, like code schools and weekend intro events or online curricula, we have to be more thoughtful about the next incremental step between kickoff and a dev career.&lt;/p&gt;

&lt;h2 id=&#34;how-you-write-for-other-people&#34;&gt;How You Write for Other People&lt;/h2&gt;

&lt;p&gt;Along the lines of incremental improvement and developing people, &lt;a href=&#34;http://nicolefenton.com/&#34;&gt;Nicole Fenton&lt;/a&gt; pushed everyone think hard about how their apps get users what they need.&lt;/p&gt;

&lt;p&gt;Specifically, how do the &amp;ldquo;strings&amp;rdquo; or &amp;ldquo;micro-copy&amp;rdquo; or small cues and instructions that guide someone through a piece of software actually help them or are they just robotic, systems-focused, impersonal, confusing signposts.&lt;/p&gt;

&lt;p&gt;One example she shared was from Square, when you send someone money. The confirmation email you receive basically says &amp;ldquo;You sent So-and-So $50.&amp;rdquo; Simple, right?&lt;/p&gt;

&lt;p&gt;Well, she had plenty of counter-examples that would have been equivalent to &amp;ldquo;We have received your request to transfer funds to user XXXX. We are accessing the database to store your request and &amp;hellip;..typically processing time for this request&amp;hellip;.&amp;rdquo; Or something full of jargon and procedures that are necessary from the software&amp;rsquo;s point of view but completely irrelevant to the goal the user is trying to accomplish.&lt;/p&gt;

&lt;p&gt;So, the next time you write copy for a button, an error message, or a confirmation, ask yourself, &amp;ldquo;what was the user trying to do and where do they need/want to go next? Am I helping them along that path in a way they&amp;rsquo;ll understand?&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;how-you-build-for-other-people&#34;&gt;How You Build for Other People&lt;/h2&gt;

&lt;p&gt;Both &lt;a href=&#34;http://danluchi.com/&#34;&gt;Dan Luchi&lt;/a&gt; and &lt;a href=&#34;http://alanpeabody.com/&#34;&gt;Alan Peabody&lt;/a&gt; grappled with what I&amp;rsquo;m coming to understand as the Rails identity crisis: &lt;em&gt;with an increase in mobile usage and connection speeds that enable heavier lifting client-side, what&amp;rsquo;s a server-side web framework to do?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The answer a lot of people are turning to, is that Rails is a powerful way to work with data and serve up an API that any front end view can consume.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve even heard people advocating for further decoupling functionality within Rails apps, so that each service serves its own API to the others, which seems to have advantages for maintainability and deployment.&lt;/p&gt;

&lt;p&gt;In these talks, though, the focus was mostly on getting a Rails backend to support and interact smoothly (and quickly) with whatever frontend &amp;ndash; mobile or web &amp;ndash; the user chooses.&lt;/p&gt;

&lt;p&gt;Alan explained some of the challenges and solutions he&amp;rsquo;s come up with for optimizing these connections and Dan gave us some great guidlines around functionality when deciding the best structure for building an app, like &lt;a href=&#34;http://www.ticketzen.com/&#34;&gt;Ticket Zen&lt;/a&gt;, the parking ticket payment app I hope I never have to use.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>