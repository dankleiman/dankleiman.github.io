<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sinatra on Dan Kleiman</title>
    <link>/dankleiman.github.io/categories/sinatra/index.xml</link>
    <description>Recent content in sinatra on Dan Kleiman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/dankleiman.github.io/categories/sinatra/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Race to Hello World: Rails vs. Sinatra</title>
      <link>/dankleiman.github.io/2014/06/23/the-race-to-hello-world-rails-vs.-sinatra</link>
      <pubDate>Mon, 23 Jun 2014 08:11:28 -0400</pubDate>
      
      <guid>/dankleiman.github.io/2014/06/23/the-race-to-hello-world-rails-vs.-sinatra</guid>
      <description>

&lt;p&gt;Earlier, I explained how I built &lt;a href=&#34;dankleiman.github.io/blog/2014/05/30/buying-a-mongolian-website/&#34;&gt;my personalized url shortner&lt;/a&gt; in Sinatra.&lt;/p&gt;

&lt;p&gt;This past week, we&amp;rsquo;ve been spinning up demo apps in Rails instead, so I wanted to walk through a little comparison of the two frameworks.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&#34;https://github.com/radavis&#34;&gt;one of our instructors&lt;/a&gt; said, &amp;ldquo;Sinatra is like a stripped-down muscle car and Rails is like an RV.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how setting up a simple &amp;ldquo;Hello, World!&amp;rdquo; app breaks down between the two.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;h2 id=&#34;sinatra-set-up&#34;&gt;Sinatra Set-Up&lt;/h2&gt;

&lt;p&gt;To set up, &amp;ldquo;Hello, Sinatra&amp;rdquo; from the command line, follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$mkdir sinatra_hello&lt;/li&gt;
&lt;li&gt;$cd sinatra_hello&lt;/li&gt;
&lt;li&gt;$gem install sinatra&lt;/li&gt;
&lt;li&gt;$touch app.rb&lt;/li&gt;
&lt;li&gt;In your app.rb file, add:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
require &#39;sinatra&#39;

get &#39;/&#39; do
  &amp;quot;Hello, Sinatra!&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To see the locally running version, start the app with ruby app.rb and visit &lt;a href=&#34;http://localhost:4567&#34;&gt;http://localhost:4567&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;rails-set-up&#34;&gt;Rails Set-Up&lt;/h2&gt;

&lt;p&gt;From the same directory we started in, instead of creating the new directory like we did for sinatra, we will follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;$rails new rails_hello&lt;/li&gt;
&lt;li&gt;$cd rails_hello&lt;/li&gt;
&lt;li&gt;$rails generate controller Posts&lt;/li&gt;
&lt;li&gt;Add an index method to posts_controller.rb&lt;/li&gt;
&lt;li&gt;define the root path in config/routes.rb to be &amp;lsquo;posts#index&amp;rsquo;&lt;/li&gt;
&lt;li&gt;create a view for the root route that says &amp;lsquo;Hello, Rails!&amp;rsquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, when we start up the rails server from the command line, we can visit &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; and see our &amp;lsquo;Hello, Rails!&amp;rsquo; message.&lt;/p&gt;

&lt;h2 id=&#34;simplicity-vs-structure&#34;&gt;Simplicity vs. Structure&lt;/h2&gt;

&lt;p&gt;As you can see from the code above, you need to install one gem and edit one file in your Sinatra version to get the basics working.&lt;/p&gt;

&lt;p&gt;In that one file, you tell the server what to do with one HTTP &amp;lsquo;GET&amp;rsquo; request: where to go and what to display.&lt;/p&gt;

&lt;p&gt;In contrast, in Rails, directing the request and displaying the response are delegate to different areas of the application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;routes.rb interprets the &amp;lsquo;GET&amp;rsquo; request and sends us to the Posts Controller&lt;/li&gt;
&lt;li&gt;inside the controller, there are instructions for what to do with the request for &amp;ldquo;index&amp;rdquo;&lt;/li&gt;
&lt;li&gt;a specific view file (app/views/posts/index.html.erb) finally configures the response: &amp;ldquo;Hello, Rails&amp;rdquo; printed to the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We were fortunate to work with HTTP requests a little more directly in Sinatra first, before we started relying on the conventions of Rails to more &amp;ldquo;magically&amp;rdquo; handle them for us.&lt;/p&gt;

&lt;p&gt;At first, learning Rails feels like learning what files to put where to make the right thing happen.&lt;/p&gt;

&lt;p&gt;When we worked out of a single server file in Sinatra, in contrast, we were tracking the different components of HTTP requests and responses more directly.&lt;/p&gt;

&lt;p&gt;Coming away from these last two weeks of playing with Sinatra and Rails, I&amp;rsquo;m glad we started with Sinatra for the directness, but I can also see, as our projects get bigger, how the conventions and structures of Rails will allow us to maintain clear, organized code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>