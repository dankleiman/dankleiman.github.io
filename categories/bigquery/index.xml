<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bigquery on Dan Kleiman</title>
    <link>/dankleiman.github.io/categories/bigquery/index.xml</link>
    <description>Recent content in bigquery on Dan Kleiman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/dankleiman.github.io/categories/bigquery/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Top N Per Group in BigQuery</title>
      <link>/dankleiman.github.io/2017/10/30/top-n-per-group-in-bigquery</link>
      <pubDate>Mon, 30 Oct 2017 19:29:32 -0400</pubDate>
      
      <guid>/dankleiman.github.io/2017/10/30/top-n-per-group-in-bigquery</guid>
      <description>&lt;p&gt;In this post, we are going to explore a strategy for collecting the &lt;strong&gt;Top N results per Group&lt;/strong&gt; over a mixed dataset, all in a single query.&lt;/p&gt;

&lt;p&gt;I stumbled onto this solution the other day, mostly driven by the fear that I was re-scanning my BigQuery data too often. At the time, the only way I knew how to look at a Top 10 list of a subset of the data was to add a &lt;code&gt;WHERE&lt;/code&gt; clause limiting the whole data set to a single group and combine with &lt;code&gt;ORDER BY&lt;/code&gt; and &lt;code&gt;LIMIT&lt;/code&gt; clauses.&lt;/p&gt;

&lt;p&gt;For each group, I would just modify the &lt;code&gt;WHERE&lt;/code&gt; clause, rescan all the data, and get new results. I thought there had to be an easier way to get the same ordered subset for any particular group in the data, all at once.&lt;/p&gt;

&lt;p&gt;It turns out, there is a much more efficient way to solve this problem.
&lt;/p&gt;

&lt;h2 id=&#34;reddit-top-10-users-by-comment-score-for-july-2015&#34;&gt;Reddit Top 10 Users By Comment Score for July, 2015&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start with an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT
  author,
  sum(score) as comment_score
FROM
  `fh-bigquery.reddit_comments.2015_07`
WHERE author NOT IN (&#39;[deleted]&#39;, &#39;AutoModerator&#39;)  
GROUP BY 1
ORDER BY 2 DESC
LIMIT 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;_I&amp;rsquo;m leaving out all query results in this post because it&amp;rsquo;s a &lt;a href=&#34;https://bigquery.cloud.google.com/table/fh-bigquery:reddit_comments.2015_07?tab=preview&#34;&gt;public dataset&lt;/a&gt; and you should totally go run the queries to see for yourself!_&lt;/p&gt;

&lt;p&gt;In the most straightforward way possible, we&amp;rsquo;re summing up the comment score by author, ordering by highest score, and taking the first ten results.&lt;/p&gt;

&lt;p&gt;While top commenters across all of reddit might be meaningful, you probably want to look at a specific subreddit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT
  author,
  SUM(score) AS comment_score
FROM
  `fh-bigquery.reddit_comments.2015_07`
WHERE
  author NOT IN (&#39;[deleted]&#39;, &#39;AutoModerator&#39;)
  AND subreddit = &#39;webdev&#39;
GROUP BY
  1
ORDER BY
  2 DESC
LIMIT 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By adding another filter to your &lt;code&gt;WHERE&lt;/code&gt; clause you can now see relevant top commenters in a single subreddit.&lt;/p&gt;

&lt;p&gt;This is what I was doing initially to inspect the dataset. I kept swapping out the subreddit in the &lt;code&gt;WHERE&lt;/code&gt; clause and running the query again to view top commenters in different subreddits.&lt;/p&gt;

&lt;p&gt;That was an okay first pass at understanding the data, but it&amp;rsquo;s wasteful to re-scan the whole table every time to pull a single Top 10 result set. The better approach would be to get the Top 10 results for each subreddit all at once and store the results to its own table that you can then query for a single subreddit as much as you want.&lt;/p&gt;

&lt;p&gt;Also, if you ever wanted to build a data visualization tool off this view into the comment data, you wouldn&amp;rsquo;t want to compute scores and rankings each time. So either way, working towards a single query makes a lot of sense.&lt;/p&gt;

&lt;h2 id=&#34;top-10-per-subreddit&#34;&gt;Top 10 per Subreddit&lt;/h2&gt;

&lt;p&gt;So far we have a pretty easy way to either get the Top 10 of the whole set or the Top 10 of a subset of the data.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s look at a technique for getting the Top 10 of each subset all at once. Thanks to this &lt;a href=&#34;https://stackoverflow.com/questions/44680464/get-top-n-records-for-each-group-of-grouped-results-with-bigquery-standard-sql?answertab=votes#tab-top&#34;&gt;stackoverflow post&lt;/a&gt;, I had a solution, but I wanted to understand how to get to that solution from the &amp;ldquo;one Top 10 at a time&amp;rdquo; approach.&lt;/p&gt;

&lt;h3 id=&#34;row-number&#34;&gt;ROW_NUMBER()&lt;/h3&gt;

&lt;p&gt;First, we need a way to order the commenters by score within each group. The key here is using the analytic function &lt;code&gt;ROW_NUMBER()&lt;/code&gt;. &lt;a href=&#34;https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#analytic-functions&#34;&gt;In databases, an analytic function is a function that computes aggregate values over a group of rows.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT
  subreddit,
  author,
  SUM(score) AS total_score,
  ROW_NUMBER() OVER (PARTITION BY subreddit ORDER BY SUM(score) DESC) AS comment_rank
FROM
  `fh-bigquery.reddit_comments.2015_07`
WHERE
  author NOT IN (&#39;[deleted]&#39;,
    &#39;AutoModerator&#39;)
GROUP BY
  1,
  2
ORDER BY
  1,4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This query will give us every author who commented in every subreddit with their aggregate comment score, &lt;em&gt;ranked by their comment score within the specific subreddit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We used the &lt;code&gt;ROW_NUMBER()&lt;/code&gt; function to create an ordered list of scores, highest to lowest, by partitioning the data in a way that looks a lot like our second query, where we ranked comment scores from a single subreddit.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re almost there!&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve got relative rank of each author within each subreddit in one query, but what we&amp;rsquo;re missing is our Top 10 List for each subreddit. The query above still gives us all authors for all ranks.&lt;/p&gt;

&lt;h3 id=&#34;subquery-ftw&#34;&gt;Subquery FTW&lt;/h3&gt;

&lt;p&gt;Unfortunately, we can&amp;rsquo;t just put a &lt;code&gt;WHERE&lt;/code&gt; clause like &lt;code&gt;comment_rank &amp;lt;= 10&lt;/code&gt; into the query or use a &lt;code&gt;HAVING&lt;/code&gt; constraint on the &lt;code&gt;GROUP BY&lt;/code&gt;. Instead, we need to do a subquery to select from the ranked data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT
  subreddit,
  author,
  author_count,
  total_score,
  comment_rank
FROM (
  SELECT
    subreddit,
    author,
    SUM(score) AS total_score,
    ROW_NUMBER() OVER (PARTITION BY subreddit ORDER BY SUM(score) DESC) AS comment_rank,
    COUNT(DISTINCT author) OVER (PARTITION BY subreddit) AS author_count
  FROM
    `fh-bigquery.reddit_comments.2015_07`
  WHERE
    author NOT IN (&#39;[deleted]&#39;,&#39;AutoModerator&#39;)
  GROUP BY
    1,2
    )
WHERE
  comment_rank &amp;lt;= 10
  AND author_count &amp;gt; 9
ORDER BY
  1,5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are pulling all results where the &lt;code&gt;comment_rank &amp;lt;= 10&lt;/code&gt;, meaning positions 1-10 in each subreddit by aggregate comment score. And just as a way of cleaning up the data even more, we added in the &lt;code&gt;author_count&lt;/code&gt; column so that we can ensure that each subset has at least 10 authors &amp;ndash; we&amp;rsquo;ll get a full Top 10 for each of the subreddits in our result.&lt;/p&gt;

&lt;h3 id=&#34;verification&#34;&gt;Verification&lt;/h3&gt;

&lt;p&gt;To verify this data, you can pick out any subreddit in the result set and compare it to the single subreddit query (the second query in this post) above. Spot any differences? We&amp;rsquo;ll leave it as an exercise to the reader to figure out a tie-breaker strategy if we really wanted to ensure the same Top 10 results every time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Don&#39;t Blow Your BigQuery Budget on Unknown Data!</title>
      <link>/dankleiman.github.io/2017/10/06/dont-blow-your-bigquery-budget-on-unknown-data</link>
      <pubDate>Fri, 06 Oct 2017 14:55:37 -0400</pubDate>
      
      <guid>/dankleiman.github.io/2017/10/06/dont-blow-your-bigquery-budget-on-unknown-data</guid>
      <description>&lt;p&gt;It&amp;rsquo;s easy to blow your BigQuery budget when you are exploring a new data set. Because you&amp;rsquo;re billed for the amount of data scanned, not the ultimate result set, when you don&amp;rsquo;t know what you&amp;rsquo;re looking  for, you can end up with wasteful queries.&lt;/p&gt;

&lt;p&gt;In this post, I&amp;rsquo;m going to share some tips for more efficiently scanning data in BigQuery when you don&amp;rsquo;t quite know what you need.
&lt;/p&gt;

&lt;p&gt;To ground some of these questions in an example, at work, we often investigate unknowns in our data, especially where we integrate with third parties. Recently, we were reconciling some data with a third party that posts us back about in-app events. They had about 50,000 events for one month, and our logs showed that we processed 10,000. What happened to the delta? Who had the more accurate number?&lt;/p&gt;

&lt;p&gt;The table in BigQuery that holds these particular event logs for us gets about 1 billion postbacks a day and the period in question was a whole month. So, without blowing my whole BigQuery budget, I had to poke at this large data set and explain how those 50k needles moved through our haystack of 30 billion requests.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re new to BigQuery, and drawing on your past experience with other databases, it&amp;rsquo;s tempting to want to &lt;code&gt;SELECT * FROM whole_month_of_data&lt;/code&gt;, export it to Excel, and do a &lt;code&gt;VLOOKUP&lt;/code&gt; to see if their data is there&amp;hellip;but as you&amp;rsquo;re about to learn, that is the 100% wrong approach to efficiently working with data in BigQuery.&lt;/p&gt;

&lt;p&gt;Now, I can&amp;rsquo;t share our actual queries and data with you for this particular case, but fortunately, &lt;a href=&#34;https://cloud.google.com/bigquery/public-data/&#34;&gt;Google makes public datasets available&lt;/a&gt; to anyone using BigQuery. And you can start to play around on their free tier, provided you follow these tips to stay under the free allocation.&lt;/p&gt;

&lt;p&gt;I used all these same techiniques to ultimately piece together a clear explanation of how the event data moved through our applications&amp;hellip;and I only blew my daily BigQuery budget on the first day of this investigation.&lt;/p&gt;

&lt;h2 id=&#34;never-use-select&#34;&gt;Never Use Select *&lt;/h2&gt;

&lt;p&gt;So, the first thing you should do when you open up a new dataset, is NEVER USE &lt;code&gt;SELECT *&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re used to working with smaller row-based relationational datastores, like MySQL or Postgres, then &lt;code&gt;SELECT *&lt;/code&gt; is a handy way to get a feel for what&amp;rsquo;s stored in your tables.&lt;/p&gt;

&lt;p&gt;However, in a column-based store like BigQuery, &lt;code&gt;SELECT *&lt;/code&gt; is much less efficient. Instead, you want to explore column-by-column.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a good explanation of the difference &lt;a href=&#34;http://docs.aws.amazon.com/redshift/latest/dg/c_columnar_storage_disk_mem_mgmnt.html&#34;&gt;between row-based and column-based datastores&lt;/a&gt;. Basically, in a row store, the data for each row is stored continguously in memory on disk, so when you &lt;code&gt;SELECT *&lt;/code&gt; and pull out the whole row, you&amp;rsquo;re reaching for adjacent memory that is more easily pulled all at once.&lt;/p&gt;

&lt;p&gt;In a column-based store, the allocation is inverted, so the whole column of data is stored together, not the row. Every time you have to pull a new column to build your row, you&amp;rsquo;re reaching somewhere else on disk, which is less efficient.&lt;/p&gt;

&lt;p&gt;Pulling an entire column is going to be cheaper than pulling all columns, even if you do something like &lt;code&gt;SELECT * FROM whatever LIMIT 1&lt;/code&gt; because each of the non-contiguous columns has to be scanned to get the data you need.&lt;/p&gt;

&lt;h2 id=&#34;handy-preview-mode&#34;&gt;Handy Preview Mode&lt;/h2&gt;

&lt;p&gt;If you need to explore an unknown data set, you can still get a feel for what&amp;rsquo;s in each column and the different characteristics of the data by using BigQuery&amp;rsquo;s built in &amp;ldquo;preview&amp;rdquo; function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;dankleiman.github.io/images/bigquery_preview_mode.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m using &lt;a href=&#34;https://bigquery.cloud.google.com/table/fh-bigquery:reddit_comments.2015_01?tab=preview&#34;&gt;this publicly available dump of Reddit comments&lt;/a&gt; for all the screenshots in this post.&lt;/p&gt;

&lt;p&gt;Use preview to refine the questions you need to answer with the data and understand what data is available. When you find a potentially useful column, just query this column, grouping values or filtering results to understand what&amp;rsquo;s there more thoroughly.&lt;/p&gt;

&lt;p&gt;But remember, even here, you don&amp;rsquo;t want to be crawling the whole data set you&amp;rsquo;re ultimately interested in each time. Instead, try to limit it to a single shard of data &amp;ndash; in my work example above, that would have been a single day of data, even though I was ultimately going to have to scan a whole month.&lt;/p&gt;

&lt;h2 id=&#34;run-your-big-query-once&#34;&gt;Run Your Big Query Once&lt;/h2&gt;

&lt;p&gt;Once you&amp;rsquo;ve identified the columns and clauses you need, run the &amp;ldquo;big query&amp;rdquo; once and store it to a temp table.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;dankleiman.github.io/images/bigquery_temp_table.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Now, instead of querying against billions of rows each time, you will be working with a subset of data. Even if it&amp;rsquo;s a few million rows, it will still be more efficient.&lt;/p&gt;

&lt;h2 id=&#34;import-external-data&#34;&gt;Import External Data&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re comparing BigQuery data to external data, you might be tempted to export your BigQuery data at this point and try to compare data in spreadsheets. Don&amp;rsquo;t!&lt;/p&gt;

&lt;p&gt;Instead, you can import data into BigQuery as a temp table and use the auto-detect schema feature. BigQuery will build you a temp table with all the columns and rows from your spreadsheet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;dankleiman.github.io/images/bigquery_import_data.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Now you can use your temp table or any other data set to write SQL against your external data. You can even join data across BigQuery projects &amp;ndash; the project name is just part of the namespace that identifies each table.&lt;/p&gt;

&lt;h2 id=&#34;now-go-query&#34;&gt;Now Go Query&lt;/h2&gt;

&lt;p&gt;I know when I started working with data in BigQuery, I was always afraid I was going to scan too much data, or write bad SQL. I probably still do that on a regular basis, but hopefully, by following these guidelines, I&amp;rsquo;ve become a little smarter about how I tackle an unknown data problem.&lt;/p&gt;

&lt;p&gt;And I hope you found at least one good tip in this post to go and use too!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>