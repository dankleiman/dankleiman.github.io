<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>quick-tip on Dan Kleiman</title>
    <link>https://dankleiman.com/categories/quick-tip/index.xml</link>
    <description>Recent content in quick-tip on Dan Kleiman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/quick-tip/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SQL Quick Tip: Find Missing Data</title>
      <link>https://dankleiman.com/2019/10/06/sql-quick-tip-find-missing-data</link>
      <pubDate>Sun, 06 Oct 2019 21:54:42 -0400</pubDate>
      
      <guid>https://dankleiman.com/2019/10/06/sql-quick-tip-find-missing-data</guid>
      <description>Whenever you have two sets of data and you need to find the entries that are in your first set, but not in your second set, use this pattern.
Let&amp;rsquo;s say you have an application that tracks user sign-ups separately for user sign-ins. You might be interested in knowing which users have signed up, but never signed in.
Postgres makes it easy to mock up some sample data so we can work through this use case.</description>
    </item>
    
    <item>
      <title>SQL Quick Tip: Showing Changes in Your Data</title>
      <link>https://dankleiman.com/2019/09/27/sql-quick-tip-showing-changes-in-your-data</link>
      <pubDate>Fri, 27 Sep 2019 00:00:00 -0400</pubDate>
      
      <guid>https://dankleiman.com/2019/09/27/sql-quick-tip-showing-changes-in-your-data</guid>
      <description>In this tip, we want to look at a concise way to shows changes in your data.
I tend to think of this type of problem as a going from &amp;ldquo;finding&amp;rdquo; data to &amp;ldquo;describing&amp;rdquo; data. For example, if you know how to get every value for a user in the database for the last 30 days, then you can &amp;ldquo;find&amp;rdquo; data. When you calculate aggregates of that data using functions like MAX, MIN, SUM, or AVG, you are now &amp;ldquo;describing&amp;rdquo; the data.</description>
    </item>
    
    <item>
      <title>SQL Quick Tip: Guarantee Rows for Every Date in Your Report</title>
      <link>https://dankleiman.com/2019/09/12/sql-quick-tip-guarantee-rows-for-every-date-in-your-report</link>
      <pubDate>Thu, 12 Sep 2019 21:57:02 -0400</pubDate>
      
      <guid>https://dankleiman.com/2019/09/12/sql-quick-tip-guarantee-rows-for-every-date-in-your-report</guid>
      <description>&lt;p&gt;When you are reporting on metrics over time, sometimes your data will have missing entries on certain days.&lt;/p&gt;

&lt;p&gt;In these cases, it&amp;rsquo;s useful to be able to ensure that every date shows up in your report, regardless of whether or not there is a metric in the dataset for that date.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s use daily user logins to a website for a reporting metric to illustrate how you solve this problem.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL Quick Tip: Present Cleaner Results with Custom Ordering</title>
      <link>https://dankleiman.com/2019/08/30/sql-quick-tip-present-cleaner-results-with-custom-ordering</link>
      <pubDate>Fri, 30 Aug 2019 19:40:40 -0400</pubDate>
      
      <guid>https://dankleiman.com/2019/08/30/sql-quick-tip-present-cleaner-results-with-custom-ordering</guid>
      <description>&lt;p&gt;Usually, when you add an &lt;code&gt;ORDER BY&lt;/code&gt; clause to your SQL query, you want to sort by your columns&amp;rsquo; values.&lt;/p&gt;

&lt;p&gt;To track the top 10 cryptocurrencies by price over the last 90 days, for example, you would write a query like this:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>