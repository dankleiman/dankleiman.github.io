<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sql on Dan Kleiman</title>
    <link>https://dankleiman.com/categories/sql/index.xml</link>
    <description>Recent content in sql on Dan Kleiman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/sql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SQL Quick Tip: Present Cleaner Results with Custom Ordering</title>
      <link>https://dankleiman.com/2019/08/30/sql-quick-tip-present-cleaner-results-with-custom-ordering</link>
      <pubDate>Fri, 30 Aug 2019 19:40:40 -0400</pubDate>
      
      <guid>https://dankleiman.com/2019/08/30/sql-quick-tip-present-cleaner-results-with-custom-ordering</guid>
      <description>&lt;p&gt;Usually, when you add an &lt;code&gt;ORDER BY&lt;/code&gt; clause to your SQL query, you want to sort by your columns&amp;rsquo; values.&lt;/p&gt;

&lt;p&gt;To track the top 10 cryptocurrencies by price over the last 90 days, for example, you would write a query like this:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Roll Your Own Database: Part 1</title>
      <link>https://dankleiman.com/2019/02/16/roll-your-own-database-part-1</link>
      <pubDate>Sat, 16 Feb 2019 11:31:03 -0500</pubDate>
      
      <guid>https://dankleiman.com/2019/02/16/roll-your-own-database-part-1</guid>
      <description>Warning: This post is NSFW. In this series, we are going to build a really, really simple database management system that you should by no means use in a production work environment.
Here&amp;rsquo;s the experiment:
 Start with a naive implementation of a database &amp;ndash; read and write from a local csv file Reach for all the normal features we use every day: basic CRUD, aggregate queries, complex joins Realize that our basic implementation falls short Look at how these problems are solved in modern systems  Think of the whole series as one giant experiment in Cunningham&amp;rsquo;s Law: &amp;ldquo;the best way to get the right answer on the internet is not to ask a question; it&amp;rsquo;s to post the wrong answer.</description>
    </item>
    
    <item>
      <title>Seed Data for Your WIP SQL Queries</title>
      <link>https://dankleiman.com/2019/02/05/seed-data-for-your-wip-sql-queries</link>
      <pubDate>Tue, 05 Feb 2019 20:41:59 -0500</pubDate>
      
      <guid>https://dankleiman.com/2019/02/05/seed-data-for-your-wip-sql-queries</guid>
      <description>In my last post, I wrote about steps you can take to make writing complicated queries more manageable. One aspect that I didn&amp;rsquo;t cover in that post is how to set sample data to work with during the writing process. Assuming you&amp;rsquo;re not working directly in your production database as you test out new queries (right? right?? right???), you need some way to work on your new ideas.
In this post, I want to share some tips and tricks for creating reliable, reproduceable test data to help you develop new ideas in SQL.</description>
    </item>
    
    <item>
      <title>Stop Writing SQL Backwards</title>
      <link>https://dankleiman.com/2019/01/02/stop-writing-sql-backwards</link>
      <pubDate>Wed, 02 Jan 2019 09:21:26 -0500</pubDate>
      
      <guid>https://dankleiman.com/2019/01/02/stop-writing-sql-backwards</guid>
      <description>How many times have you started off building a complicated analytical SQL query like this?
SELECT . . . . uh??? . . SELECT * FROM . . . SELECT . . .  And you get stuck trying to figure out exactly what you want to select. You&amp;rsquo;re thinking about averages, group by&amp;rsquo;s, the order of your results or some change you want to see over time and the query editor is just sitting there, taunting you, because in SQL, you have to know up front what you want to select into your final results.</description>
    </item>
    
    <item>
      <title>3 Ways to Level Up Your SQL as a Software Engineer</title>
      <link>https://dankleiman.com/2018/02/06/3-ways-to-level-up-your-sql-as-a-software-engineer</link>
      <pubDate>Tue, 06 Feb 2018 12:31:44 -0500</pubDate>
      
      <guid>https://dankleiman.com/2018/02/06/3-ways-to-level-up-your-sql-as-a-software-engineer</guid>
      <description>&lt;p&gt;If you are a software engineer and you have just enough SQL to write queries that count, sum, average join and maybe sub-select, then I&amp;rsquo;m writing this post for you. If, when you need more complicated analysis or computation, you pull your query results into excel or your favorite scripting language to do more processing, then I have some good news.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a whole lot more you can do right in SQL and it&amp;rsquo;s not too bad to learn how to do it.&lt;/p&gt;

&lt;p&gt;In this post, I&amp;rsquo;m going to cover a few concepts that have recently helped me do more computation, better analysis, and it turns out, more efficient querying&amp;hellip;and I hope they help you too.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>