<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post on Dan Kleiman</title>
    <link>/dankleiman.github.io/post/index.xml</link>
    <description>Recent content in Post on Dan Kleiman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Oct 2017 19:29:32 -0400</lastBuildDate>
    <atom:link href="/dankleiman.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Top N Per Group in BigQuery</title>
      <link>/dankleiman.github.io/2017/10/30/top-n-per-group-in-bigquery</link>
      <pubDate>Mon, 30 Oct 2017 19:29:32 -0400</pubDate>
      
      <guid>/dankleiman.github.io/2017/10/30/top-n-per-group-in-bigquery</guid>
      <description>&lt;p&gt;In this post, we are going to explore a strategy for collecting the &lt;strong&gt;Top N results per Group&lt;/strong&gt; over a mixed dataset, all in a single query.&lt;/p&gt;

&lt;p&gt;I stumbled onto this solution the other day, mostly driven by the fear that I was re-scanning my BigQuery data too often. At the time, the only way I knew how to look at a Top 10 list of a subset of the data was to add a &lt;code&gt;WHERE&lt;/code&gt; clause limiting the whole data set to a single group and combine with &lt;code&gt;ORDER BY&lt;/code&gt; and &lt;code&gt;LIMIT&lt;/code&gt; clauses.&lt;/p&gt;

&lt;p&gt;For each group, I would just modify the &lt;code&gt;WHERE&lt;/code&gt; clause, rescan all the data, and get new results. I thought there had to be an easier way to get the same ordered subset for any particular group in the data, all at once.&lt;/p&gt;

&lt;p&gt;It turns out, there is a much more efficient way to solve this problem.
&lt;/p&gt;

&lt;h2 id=&#34;reddit-top-10-users-by-comment-score-for-july-2015&#34;&gt;Reddit Top 10 Users By Comment Score for July, 2015&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start with an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT
  author,
  sum(score) as comment_score
FROM
  `fh-bigquery.reddit_comments.2015_07`
WHERE author NOT IN (&#39;[deleted]&#39;, &#39;AutoModerator&#39;)  
GROUP BY 1
ORDER BY 2 DESC
LIMIT 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;_I&amp;rsquo;m leaving out all query results in this post because it&amp;rsquo;s a &lt;a href=&#34;https://bigquery.cloud.google.com/table/fh-bigquery:reddit_comments.2015_07?tab=preview&#34;&gt;public dataset&lt;/a&gt; and you should totally go run the queries to see for yourself!_&lt;/p&gt;

&lt;p&gt;In the most straightforward way possible, we&amp;rsquo;re summing up the comment score by author, ordering by highest score, and taking the first ten results.&lt;/p&gt;

&lt;p&gt;While top commenters across all of reddit might be meaningful, you probably want to look at a specific subreddit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT
  author,
  SUM(score) AS comment_score
FROM
  `fh-bigquery.reddit_comments.2015_07`
WHERE
  author NOT IN (&#39;[deleted]&#39;, &#39;AutoModerator&#39;)
  AND subreddit = &#39;webdev&#39;
GROUP BY
  1
ORDER BY
  2 DESC
LIMIT 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By adding another filter to your &lt;code&gt;WHERE&lt;/code&gt; clause you can now see relevant top commenters in a single subreddit.&lt;/p&gt;

&lt;p&gt;This is what I was doing initially to inspect the dataset. I kept swapping out the subreddit in the &lt;code&gt;WHERE&lt;/code&gt; clause and running the query again to view top commenters in different subreddits.&lt;/p&gt;

&lt;p&gt;That was an okay first pass at understanding the data, but it&amp;rsquo;s wasteful to re-scan the whole table every time to pull a single Top 10 result set. The better approach would be to get the Top 10 results for each subreddit all at once and store the results to its own table that you can then query for a single subreddit as much as you want.&lt;/p&gt;

&lt;p&gt;Also, if you ever wanted to build a data visualization tool off this view into the comment data, you wouldn&amp;rsquo;t want to compute scores and rankings each time. So either way, working towards a single query makes a lot of sense.&lt;/p&gt;

&lt;h2 id=&#34;top-10-per-subreddit&#34;&gt;Top 10 per Subreddit&lt;/h2&gt;

&lt;p&gt;So far we have a pretty easy way to either get the Top 10 of the whole set or the Top 10 of a subset of the data.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s look at a technique for getting the Top 10 of each subset all at once. Thanks to this &lt;a href=&#34;https://stackoverflow.com/questions/44680464/get-top-n-records-for-each-group-of-grouped-results-with-bigquery-standard-sql?answertab=votes#tab-top&#34;&gt;stackoverflow post&lt;/a&gt;, I had a solution, but I wanted to understand how to get to that solution from the &amp;ldquo;one Top 10 at a time&amp;rdquo; approach.&lt;/p&gt;

&lt;h3 id=&#34;row-number&#34;&gt;ROW_NUMBER()&lt;/h3&gt;

&lt;p&gt;First, we need a way to order the commenters by score within each group. The key here is using the analytic function &lt;code&gt;ROW_NUMBER()&lt;/code&gt;. &lt;a href=&#34;https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#analytic-functions&#34;&gt;In databases, an analytic function is a function that computes aggregate values over a group of rows.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT
  subreddit,
  author,
  SUM(score) AS total_score,
  ROW_NUMBER() OVER (PARTITION BY subreddit ORDER BY SUM(score) DESC) AS comment_rank
FROM
  `fh-bigquery.reddit_comments.2015_07`
WHERE
  author NOT IN (&#39;[deleted]&#39;,
    &#39;AutoModerator&#39;)
GROUP BY
  1,
  2
ORDER BY
  1,4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This query will give us every author who commented in every subreddit with their aggregate comment score, &lt;em&gt;ranked by their comment score within the specific subreddit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We used the &lt;code&gt;ROW_NUMBER()&lt;/code&gt; function to create an ordered list of scores, highest to lowest, by partitioning the data in a way that looks a lot like our second query, where we ranked comment scores from a single subreddit.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re almost there!&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve got relative rank of each author within each subreddit in one query, but what we&amp;rsquo;re missing is our Top 10 List for each subreddit. The query above still gives us all authors for all ranks.&lt;/p&gt;

&lt;h3 id=&#34;subquery-ftw&#34;&gt;Subquery FTW&lt;/h3&gt;

&lt;p&gt;Unfortunately, we can&amp;rsquo;t just put a &lt;code&gt;WHERE&lt;/code&gt; clause like &lt;code&gt;comment_rank &amp;lt;= 10&lt;/code&gt; into the query or use a &lt;code&gt;HAVING&lt;/code&gt; constraint on the &lt;code&gt;GROUP BY&lt;/code&gt;. Instead, we need to do a subquery to select from the ranked data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT
  subreddit,
  author,
  author_count,
  total_score,
  comment_rank
FROM (
  SELECT
    subreddit,
    author,
    SUM(score) AS total_score,
    ROW_NUMBER() OVER (PARTITION BY subreddit ORDER BY SUM(score) DESC) AS comment_rank,
    COUNT(DISTINCT author) OVER (PARTITION BY subreddit) AS author_count
  FROM
    `fh-bigquery.reddit_comments.2015_07`
  WHERE
    author NOT IN (&#39;[deleted]&#39;,&#39;AutoModerator&#39;)
  GROUP BY
    1,2
    )
WHERE
  comment_rank &amp;lt;= 10
  AND author_count &amp;gt; 9
ORDER BY
  1,5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are pulling all results where the &lt;code&gt;comment_rank &amp;lt;= 10&lt;/code&gt;, meaning positions 1-10 in each subreddit by aggregate comment score. And just as a way of cleaning up the data even more, we added in the &lt;code&gt;author_count&lt;/code&gt; column so that we can ensure that each subset has at least 10 authors &amp;ndash; we&amp;rsquo;ll get a full Top 10 for each of the subreddits in our result.&lt;/p&gt;

&lt;h3 id=&#34;verification&#34;&gt;Verification&lt;/h3&gt;

&lt;p&gt;To verify this data, you can pick out any subreddit in the result set and compare it to the single subreddit query (the second query in this post) above. Spot any differences? We&amp;rsquo;ll leave it as an exercise to the reader to figure out a tie-breaker strategy if we really wanted to ensure the same Top 10 results every time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Don&#39;t Blow Your BigQuery Budget on Unknown Data!</title>
      <link>/dankleiman.github.io/2017/10/06/dont-blow-your-bigquery-budget-on-unknown-data</link>
      <pubDate>Fri, 06 Oct 2017 14:55:37 -0400</pubDate>
      
      <guid>/dankleiman.github.io/2017/10/06/dont-blow-your-bigquery-budget-on-unknown-data</guid>
      <description>&lt;p&gt;It&amp;rsquo;s easy to blow your BigQuery budget when you are exploring a new data set. Because you&amp;rsquo;re billed for the amount of data scanned, not the ultimate result set, when you don&amp;rsquo;t know what you&amp;rsquo;re looking  for, you can end up with wasteful queries.&lt;/p&gt;

&lt;p&gt;In this post, I&amp;rsquo;m going to share some tips for more efficiently scanning data in BigQuery when you don&amp;rsquo;t quite know what you need.
&lt;/p&gt;

&lt;p&gt;To ground some of these questions in an example, at work, we often investigate unknowns in our data, especially where we integrate with third parties. Recently, we were reconciling some data with a third party that posts us back about in-app events. They had about 50,000 events for one month, and our logs showed that we processed 10,000. What happened to the delta? Who had the more accurate number?&lt;/p&gt;

&lt;p&gt;The table in BigQuery that holds these particular event logs for us gets about 1 billion postbacks a day and the period in question was a whole month. So, without blowing my whole BigQuery budget, I had to poke at this large data set and explain how those 50k needles moved through our haystack of 30 billion requests.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re new to BigQuery, and drawing on your past experience with other databases, it&amp;rsquo;s tempting to want to &lt;code&gt;SELECT * FROM whole_month_of_data&lt;/code&gt;, export it to Excel, and do a &lt;code&gt;VLOOKUP&lt;/code&gt; to see if their data is there&amp;hellip;but as you&amp;rsquo;re about to learn, that is the 100% wrong approach to efficiently working with data in BigQuery.&lt;/p&gt;

&lt;p&gt;Now, I can&amp;rsquo;t share our actual queries and data with you for this particular case, but fortunately, &lt;a href=&#34;https://cloud.google.com/bigquery/public-data/&#34;&gt;Google makes public datasets available&lt;/a&gt; to anyone using BigQuery. And you can start to play around on their free tier, provided you follow these tips to stay under the free allocation.&lt;/p&gt;

&lt;p&gt;I used all these same techiniques to ultimately piece together a clear explanation of how the event data moved through our applications&amp;hellip;and I only blew my daily BigQuery budget on the first day of this investigation.&lt;/p&gt;

&lt;h2 id=&#34;never-use-select&#34;&gt;Never Use Select *&lt;/h2&gt;

&lt;p&gt;So, the first thing you should do when you open up a new dataset, is NEVER USE &lt;code&gt;SELECT *&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re used to working with smaller row-based relationational datastores, like MySQL or Postgres, then &lt;code&gt;SELECT *&lt;/code&gt; is a handy way to get a feel for what&amp;rsquo;s stored in your tables.&lt;/p&gt;

&lt;p&gt;However, in a column-based store like BigQuery, &lt;code&gt;SELECT *&lt;/code&gt; is much less efficient. Instead, you want to explore column-by-column.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a good explanation of the difference &lt;a href=&#34;http://docs.aws.amazon.com/redshift/latest/dg/c_columnar_storage_disk_mem_mgmnt.html&#34;&gt;between row-based and column-based datastores&lt;/a&gt;. Basically, in a row store, the data for each row is stored continguously in memory on disk, so when you &lt;code&gt;SELECT *&lt;/code&gt; and pull out the whole row, you&amp;rsquo;re reaching for adjacent memory that is more easily pulled all at once.&lt;/p&gt;

&lt;p&gt;In a column-based store, the allocation is inverted, so the whole column of data is stored together, not the row. Every time you have to pull a new column to build your row, you&amp;rsquo;re reaching somewhere else on disk, which is less efficient.&lt;/p&gt;

&lt;p&gt;Pulling an entire column is going to be cheaper than pulling all columns, even if you do something like &lt;code&gt;SELECT * FROM whatever LIMIT 1&lt;/code&gt; because each of the non-contiguous columns has to be scanned to get the data you need.&lt;/p&gt;

&lt;h2 id=&#34;handy-preview-mode&#34;&gt;Handy Preview Mode&lt;/h2&gt;

&lt;p&gt;If you need to explore an unknown data set, you can still get a feel for what&amp;rsquo;s in each column and the different characteristics of the data by using BigQuery&amp;rsquo;s built in &amp;ldquo;preview&amp;rdquo; function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;dankleiman.github.io/images/bigquery_preview_mode.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m using &lt;a href=&#34;https://bigquery.cloud.google.com/table/fh-bigquery:reddit_comments.2015_01?tab=preview&#34;&gt;this publicly available dump of Reddit comments&lt;/a&gt; for all the screenshots in this post.&lt;/p&gt;

&lt;p&gt;Use preview to refine the questions you need to answer with the data and understand what data is available. When you find a potentially useful column, just query this column, grouping values or filtering results to understand what&amp;rsquo;s there more thoroughly.&lt;/p&gt;

&lt;p&gt;But remember, even here, you don&amp;rsquo;t want to be crawling the whole data set you&amp;rsquo;re ultimately interested in each time. Instead, try to limit it to a single shard of data &amp;ndash; in my work example above, that would have been a single day of data, even though I was ultimately going to have to scan a whole month.&lt;/p&gt;

&lt;h2 id=&#34;run-your-big-query-once&#34;&gt;Run Your Big Query Once&lt;/h2&gt;

&lt;p&gt;Once you&amp;rsquo;ve identified the columns and clauses you need, run the &amp;ldquo;big query&amp;rdquo; once and store it to a temp table.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;dankleiman.github.io/images/bigquery_temp_table.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Now, instead of querying against billions of rows each time, you will be working with a subset of data. Even if it&amp;rsquo;s a few million rows, it will still be more efficient.&lt;/p&gt;

&lt;h2 id=&#34;import-external-data&#34;&gt;Import External Data&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re comparing BigQuery data to external data, you might be tempted to export your BigQuery data at this point and try to compare data in spreadsheets. Don&amp;rsquo;t!&lt;/p&gt;

&lt;p&gt;Instead, you can import data into BigQuery as a temp table and use the auto-detect schema feature. BigQuery will build you a temp table with all the columns and rows from your spreadsheet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;dankleiman.github.io/images/bigquery_import_data.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Now you can use your temp table or any other data set to write SQL against your external data. You can even join data across BigQuery projects &amp;ndash; the project name is just part of the namespace that identifies each table.&lt;/p&gt;

&lt;h2 id=&#34;now-go-query&#34;&gt;Now Go Query&lt;/h2&gt;

&lt;p&gt;I know when I started working with data in BigQuery, I was always afraid I was going to scan too much data, or write bad SQL. I probably still do that on a regular basis, but hopefully, by following these guidelines, I&amp;rsquo;ve become a little smarter about how I tackle an unknown data problem.&lt;/p&gt;

&lt;p&gt;And I hope you found at least one good tip in this post to go and use too!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GoBridge with Bill Kennedy</title>
      <link>/dankleiman.github.io/2017/02/12/gobridge-with-bill-kennedy</link>
      <pubDate>Sun, 12 Feb 2017 15:18:04 -0500</pubDate>
      
      <guid>/dankleiman.github.io/2017/02/12/gobridge-with-bill-kennedy</guid>
      <description>&lt;p&gt;Last weekend, I had the chance to volunteer at a GoBridge event taught by Bill Kennedy of Ardan Labs. I&amp;rsquo;m trying to make &lt;a href=&#34;dankleiman.github.io/blog/2016/12/29/my-5-strategies-for-learning-go-in-2017/&#34;&gt;2017 my year of learning Go&lt;/a&gt;, so helping out at the event felt like a natural extension and a great way to connect with more people in the Go community.&lt;/p&gt;

&lt;p&gt;Going in with Ruby as my first language, I braced myself for static typing and wanted concurrent programming to bend my brain, but that&amp;rsquo;s not really what happened at all.&lt;/p&gt;

&lt;p&gt;
Before we get into what I actually learned, I urge you to check out all of these related links if you want more background on the GoBridge, the instructor, and the training material:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golangbridge.org/&#34;&gt;GoBridge&lt;/a&gt; &amp;ndash; the inspiration for the event&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/Framingham-Golang-Meetup/&#34;&gt;Framingham Go&lt;/a&gt; &amp;ndash; the meetup group that organized the event&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ardanlabs/gotraining#current-schedule&#34;&gt;Ardan Labs Trainings&lt;/a&gt; &amp;ndash; the instructor Bill Kennedy&amp;rsquo;s company that teaches this and other events&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ardanlabs/gotraining/tree/master/courses/ultimate&#34;&gt;Ultimate Go Training&lt;/a&gt; &amp;ndash; the source material, including design philosophy, practice exercises, and related reading, for the actual workshop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Bonus: git clone the Go Training repo above into you $GOPATH, go build it, and it will run as a webserver you can launch locally, browsing all the coure material and links to code samples on the Go Playground.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And one more caveat: my Tai Chi teacher always talked about the challenges of teaching Tai Chi, which has to be experienced physically, to people who like to do abstract thinking. When someone tends to build a mental model for new information first, it&amp;rsquo;s hard to get them to dive directly into the felt sensations, and as a result, they can come up with some pretty wacky ideas their first time through. He used to say it was like accidentally overhearing two young children describe what they thought sex was like. Of coure, the kids would have wildly inaccurate, innocent, and yet, elaborate ideas about it. And they would be hilariously far off from what the actual experience is like.&lt;/p&gt;

&lt;p&gt;If I head into this post trying to tell you Go is X or Go does Y better than this or that language, I&amp;rsquo;m going to sound like those little kids. This is all new to me and I don&amp;rsquo;t want to just parrot back something I&amp;rsquo;ve heard somewhere. I&amp;rsquo;ll link out to better arguments when it comes to technical detail, but I do want to try to talk about what I continue to find interesting about learning Go.&lt;/p&gt;

&lt;h2 id=&#34;design-software-for-hardware&#34;&gt;Design Software for Hardware&lt;/h2&gt;

&lt;p&gt;We started off the weekend with some &lt;a href=&#34;https://github.com/ardanlabs/gotraining/blob/master/reading/design_guidelines.md&#34;&gt;design guidelines&lt;/a&gt;. Here&amp;rsquo;s the first thing that really jumped out at me:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;The most amazing achievement of the computer software industry is its continuing cancellation of the steady and staggering gains made by the computer hardware industry.&amp;rdquo; - Henry Petroski&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Wait, so all that time I haven&amp;rsquo;t been thinking about the relationship between the code I write and the hardware it runs on, I&amp;rsquo;ve actually been contributing to the &amp;ldquo;two steps back&amp;rdquo; phase of technological evolution???&lt;/p&gt;

&lt;p&gt;We explored stack frames and memory allocation and passing values all with the notion that the performance characteristics of the underlying hardware should be factored into the way that your software is written and executed &amp;ndash; a concept with a fantastic name: &lt;strong&gt;Mechanical Sympathy&lt;/strong&gt;. Here&amp;rsquo;s where I take Bill&amp;rsquo;s word for it and I won&amp;rsquo;t try to make the case to you that Go is somehow the best way to achieve this hardware/software balance. But I will say that I am left feeling that the possibility of more powerful and efficient hardware/software unity is intriguing enough to pull me deeper into the story of Go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Homework:&lt;/strong&gt; Read everything in the &lt;a href=&#34;https://github.com/ardanlabs/gotraining/blob/master/reading/README.md#mechanical-sympathy&#34;&gt;Mechanical Sympathy&lt;/a&gt; section of the training repo.&lt;/p&gt;

&lt;h2 id=&#34;shared-behavior-over-shared-state&#34;&gt;Shared Behavior over Shared State&lt;/h2&gt;

&lt;p&gt;Now, I&amp;rsquo;ll let Bill introduce the other major hurdle I had to overcome with my object-oriented background. Starting around 5 minutes in the video, he explains a typical gotcha that people run into when they switch to Go from an object-oriented language. Even though the slides don&amp;rsquo;t come out in the video, you&amp;rsquo;ll be able to follow the issue.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/7YcLIbG1ekM?t=5m8s&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Here is &lt;a href=&#34;https://github.com/ardanlabs/gotraining/blob/master/topics/api/composition/grouping/example1/example1.go&#34;&gt;code from the training repo&lt;/a&gt; that illustrates the problem. The comment at the top of the file sums up the problem: &amp;ldquo;This is an example of using type hierarchies with a OOP pattern. This is not something we want to do in Go. Go does not have the concept of sub-typing. All types are their own and the concepts of base and derived types do not exist in Go. This pattern does not provide a good design principle in a Go program.&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
// All material is licensed under the Apache License Version 2.0, January 2004
// http://www.apache.org/licenses/LICENSE-2.0

// This is an example of using type hierarchies with a OOP pattern.
// This is not something we want to do in Go. Go does not have the
// concept of sub-typing. All types are their own and the concepts of
// base and derived types do not exist in Go. This pattern does not
// provide a good design principle in a Go program.
package main

import &amp;quot;fmt&amp;quot;

// Animal contains all the base fields for animals.
type Animal struct {
	Name     string
	IsMammal bool
}

// Speak provides generic behavior for all animals and
// how they speak.
// SMELL - This can&#39;t apply to all animals.
func (a Animal) Speak() {
	fmt.Println(&amp;quot;UGH!&amp;quot;,
		&amp;quot;My name is&amp;quot;, a.Name,
		&amp;quot;, it is&amp;quot;, a.IsMammal,
		&amp;quot;I am a mammal&amp;quot;)
}

// Dog contains everything an Animal is but specific
// attributes that only a Dog has.
type Dog struct {
	Animal
	PackFactor int
}

// Speak knows how to speak like a dog.
func (d Dog) Speak() {
	fmt.Println(&amp;quot;Woof!&amp;quot;,
		&amp;quot;My name is&amp;quot;, d.Name,
		&amp;quot;, it is&amp;quot;, d.IsMammal,
		&amp;quot;I am a mammal with a pack factor of&amp;quot;, d.PackFactor)
}

// Cat contains everything an Animal is but specific
// attributes that only a Cat has.
type Cat struct {
	Animal
	ClimbFactor int
}

// Speak knows how to speak like a cat.
func (c Cat) Speak() {
	fmt.Println(&amp;quot;Meow!&amp;quot;,
		&amp;quot;My name is&amp;quot;, c.Name,
		&amp;quot;, it is&amp;quot;, c.IsMammal,
		&amp;quot;I am a mammal with a climb factor of&amp;quot;, c.ClimbFactor)
}

func main() {

	// SMELL - I can&#39;t create a list of Cats and Dogs using
	// the Animal type. Can&#39;t create a list based on a
	// common set of state.

	// DOES NOT COMPILE

	// Create a list of Animals that know how to speak.
	animals := []Animal{

		// Create a Dog by initializing its Animal parts
		// and then its specific Dog attributes.
		Dog{
			Animal: Animal{
				Name:     &amp;quot;Fido&amp;quot;,
				IsMammal: true,
			},
			PackFactor: 5,
		},

		// Create a Cat by initializing its Animal parts
		// and then its specific Cat attributes.
		Cat{
			Animal: Animal{
				Name:     &amp;quot;Milo&amp;quot;,
				IsMammal: true,
			},
			ClimbFactor: 4,
		},
	}

	// Have the Animals speak.
	for _, animal := range animals {
		animal.Speak()
	}
}

// =============================================================================

// NOTES:

// Smells:
// 	* The Animal type is providing an abstraction layer of reusable state.
// 	* The program never needs to create or solely use a value of type Animal.
// 	* The implementation of the Speak method for the Animal type is a generalization.
// 	* The Speak method for the Animal type is never going to be called.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading the code above, especially for the notes, you can see that the OO mindset of grouping objects based on shared state, and then defining shared behavior for that heirarchy of objects, does not really hold up in Go. Instead, interfaces are defined by shared behavior &amp;ndash; or implementing the same set of methods. If a type implements all the methods defined by the interface, it &lt;em&gt;satisfies&lt;/em&gt; that interface.&lt;/p&gt;

&lt;p&gt;So in our example above, instead of thinking about the shared parent class &amp;ldquo;Animal&amp;rdquo;, Go pushes you to define an interface of &amp;ldquo;things that speak.&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;	type Speaker interface {
		Speak()
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order for a Dog or a Cat or Whatever other type to be a Speaker, it has to implement the Speak method. Sounds cool in theory, right? Here&amp;rsquo;s the first practical example I came across that helped the concept click.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;https://medium.com/go-walkthrough&#34;&gt;Ben Johnson&amp;rsquo;s Go Walkthrough series&lt;/a&gt;, where he explores different packages in the Go standard library, he gives the example of the &lt;code&gt;io.MultiReader&lt;/code&gt; function. The &lt;code&gt;Reader&lt;/code&gt; interface, like our &lt;code&gt;Speaker&lt;/code&gt; interface above, is satisfied when a type can read a stream of bytes.&lt;/p&gt;

&lt;p&gt;In the MultiReader example, Ben asks, &amp;ldquo;what if you are trying to send a POST request and you want to combine the header data you have in memory, with the contents of a file you have on disk?&amp;rdquo; Since you can access the in-memory data and file contents via &lt;code&gt;Read&lt;/code&gt; functions, the info you need can be passed into &lt;code&gt;io.MultiReader&lt;/code&gt; which accepts multiple input readers and concatenates them.&lt;/p&gt;

&lt;p&gt;So in OO land I wouldn&amp;rsquo;t group a file and header data as the same class of object, but if you drill into their behavior given the particular functionality we need, then you can easily see what they have in common.&lt;/p&gt;

&lt;p&gt;At first, seeing this difference in grouping by behavior over state was a little overwhelming - &amp;ldquo;oh gosh, I&amp;rsquo;m going to have to rethink all the heirarchies and abstracts I need to make as I&amp;rsquo;m planning out my code.&amp;rdquo; But again, Bill was very reassuring here. Here was the essence of it:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/mDYCLFE86Po&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;And if you want to see how you solve one problem at a time in your code, go back to the first video in this post for a very elegant example.&lt;/p&gt;

&lt;h2 id=&#34;for-further-training&#34;&gt;For Further Training&lt;/h2&gt;

&lt;p&gt;Check out the full list of &lt;a href=&#34;https://github.com/ardanlabs/gotraining/tree/master/courses&#34;&gt;Ardan Labs courses&lt;/a&gt; along with other recommended Go training materials like &lt;a href=&#34;http://exercism.io/languages/go/about&#34;&gt;Exercism.io&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My 5 Strategies for Learning Go in 2017</title>
      <link>/dankleiman.github.io/2016/12/29/my-5-strategies-for-learning-go-in-2017</link>
      <pubDate>Thu, 29 Dec 2016 09:29:22 -0500</pubDate>
      
      <guid>/dankleiman.github.io/2016/12/29/my-5-strategies-for-learning-go-in-2017</guid>
      <description>&lt;p&gt;Over the past couple of years, one thing I&amp;rsquo;ve become more and more aware of is the unease and uncertainty of diving into a new project. Not matter what the new X is, I find I always go through the same set of uncomfortable feelings on my initial approach.&lt;/p&gt;

&lt;p&gt;Now, though, I&amp;rsquo;m starting to become familiar enough with this process that &amp;ndash; even though the discomfort doesn&amp;rsquo;t go away in the initial learning stages &amp;ndash; I can embrace it, coexist with it, and forge ahead in learning, because of the strategies I&amp;rsquo;m going to lay out here.&lt;/p&gt;

&lt;p&gt;
Heading into 2017, the new project I want to tackle is learning to write code in &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;. Here are the 5 strategies I&amp;rsquo;ve started using to reach that goal:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Attend live events, like the &lt;a href=&#34;https://twitter.com/framinghamgo&#34;&gt;Framingham Go Meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read in-depth books, like &lt;a href=&#34;https://www.manning.com/books/go-in-action&#34;&gt;Go in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do lots of coding exercises,  like &lt;a href=&#34;https://gobyexample.com/&#34;&gt;Go by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Make a mini project that puts these new concepts to use (coming soon)&lt;/li&gt;
&lt;li&gt;Contribute to one of our live Go projects at work (The Big Goal)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It might seem like a scattershot approach, but having 5 different ways to come in contact with a new language has two layers of benefits: the things I learn directly in each context and the things that get woven together as a result of switching context between each approach.&lt;/p&gt;

&lt;p&gt;Here are the &amp;ldquo;direct&amp;rdquo; and &amp;ldquo;crossover&amp;rdquo; benefits of each strategy:&lt;/p&gt;

&lt;h2 id=&#34;attending-live-events&#34;&gt;Attending Live Events&lt;/h2&gt;

&lt;p&gt;I wandered into my first &lt;a href=&#34;https://twitter.com/framinghamgo&#34;&gt;Framingham Go Meetup&lt;/a&gt; with almost no exposure to Go, which is what I did with Ruby a few years ago. A little intimidating? Yes. Did I feel out of place? Yup. Were people welcoming and friendly? Yes!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Direct benefits:&lt;/strong&gt; Knowing full well that I would only understand bits and pieces of the talks at the first meetup, I still went for two reasons.&lt;/p&gt;

&lt;p&gt;Now I have a benchmark for seeing progress &amp;ndash; in 6 months, maybe I&amp;rsquo;ll think, &amp;ldquo;hey, I understood 70% of the talks this month!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;By meeting people and hearing about what they are working on and how they tackle problems with Go, I can start to think about applications and business logic I already understand through a Go lens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crossover benefits:&lt;/strong&gt; Fully embracing the discomfort of being in a place where some part of you thinks you don&amp;rsquo;t belong prepares you for taking on unknowns in every other mode of learning too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus:&lt;/strong&gt; I got to hear directly from Bill Kennedy (&lt;a href=&#34;http://twitter.com/goinggodotnet&#34;&gt;@goinggodotnet&lt;/a&gt;), the author of Go in Action, which I had just started reading. Big Thanks for speaking to the group and sharing &lt;a href=&#34;https://github.com/ardanlabs/gotraining/blob/master/reading/README.md&#34;&gt;these excellent resources&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;reading-books&#34;&gt;Reading Books&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Direct benefits:&lt;/strong&gt; Without previous experience in statically typed, compiled programming languages, there&amp;rsquo;s a lot about Go that I just don&amp;rsquo;t have exposure to. Having the background explained thoroughly in the long format of a book like &lt;a href=&#34;https://www.manning.com/books/go-in-action&#34;&gt;Go in Action&lt;/a&gt; is really helpful, even if I know I&amp;rsquo;m not going to retain everything on the first read.&lt;/p&gt;

&lt;p&gt;As far as programming concepts go too, the explicit format of the book helps highlight places where I do know what&amp;rsquo;s going on and I can draw comparisons to languages I already know.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crossover benefits:&lt;/strong&gt; In the last year, I&amp;rsquo;ve really recognized that if I&amp;rsquo;m actively reading a book on programming concepts, then I&amp;rsquo;m sharper every day when I go to code. I &lt;em&gt;think&lt;/em&gt; this has to do with building better mental models about the work. As little as 10-15 minutes of theory reading a day helps me think more clearly about problems I&amp;rsquo;m trying to solve, even if they are unrelated to the book I&amp;rsquo;m reading.&lt;/p&gt;

&lt;h2 id=&#34;coding-exercises&#34;&gt;Coding Exercises&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Direct benefits:&lt;/strong&gt; While coding books do tend to have examples in them, I find a ton of added benefit to sites like &lt;a href=&#34;https://gobyexample.com/&#34;&gt;Go by Example&lt;/a&gt;, where you can do exercise after exercise. I&amp;rsquo;m not necessarily talking about &amp;ldquo;coding challenges&amp;rdquo; either. Instead, I want to find examples that I can literally copy to reinforce the patterns and idioms used in Go. Rote learning here is tremendously helpful to get my fingers to start &amp;ldquo;thinking in Go.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crossover benefits:&lt;/strong&gt; After a while, I start jumping back and forth between books and exercises, to create stronger connections between the muscle memory in my hands and the concepts in my head.&lt;/p&gt;

&lt;p&gt;For example, once I read the section on loops and conditionals, I thought, why not try Fizzbuzz:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	for i := 1; i &amp;lt;= 100; i++ {
		if i%15 == 0 {
			fmt.Println(&amp;quot;fizzbuzz&amp;quot;)
		} else if i%5 == 0 {
			fmt.Println(&amp;quot;buzz&amp;quot;)
		} else if i%3 == 0 {
			fmt.Println(&amp;quot;fizz&amp;quot;)
		} else {
			fmt.Println(i)
		}

	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From past experience with simple code exercises in other languages, I know that I&amp;rsquo;ll reimplement Fizzbuzz or something like it &amp;ndash; maybe with goroutines and channels?? &amp;ndash; a half dozen times over the next few months, as I pick up new concepts and styles.&lt;/p&gt;

&lt;h2 id=&#34;mini-projects&#34;&gt;Mini Projects&lt;/h2&gt;

&lt;p&gt;I actually started out thinking this was the first thing I would do. Pretty soon, though, I realized that I&amp;rsquo;d rather get a foundation in the core concepts first and have some muscle memory, i.e. not have to look up the syntax for declaring variables or iterating over a slice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Direct benefits:&lt;/strong&gt; By pushing this project back a little bit, I can use it as a test of &amp;ldquo;the basics.&amp;rdquo; Also, for what I have in mind (stay tuned!), I will need to dig into Go&amp;rsquo;s standard library for things like making http requests and file IO. I&amp;rsquo;m considering these slightly more advanced explorations, once I feel comfortable with the flow of a simple program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crossover benefits:&lt;/strong&gt; Hopefully, this stage will push me to ask some bigger design questions too and I&amp;rsquo;ll have the chance to talk to my coworkers or people I&amp;rsquo;ve met from the meetups more about that.&lt;/p&gt;

&lt;h2 id=&#34;production-code-at-work&#34;&gt;Production Code at Work&lt;/h2&gt;

&lt;p&gt;This is on my strategy list, but it&amp;rsquo;s really a goal that will prove that I&amp;rsquo;ve done the work of all the other strategies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Direct benefits:&lt;/strong&gt; Not only would some production code be higher stakes than code I&amp;rsquo;d write in any of the other approaches &amp;ndash; nothing like production deployment pressure to accelerate learning! &amp;ndash; but I will also have the most context, because I&amp;rsquo;ve been writing code for the same platform, so I&amp;rsquo;ll have lots of domain knowledge to guide me.&lt;/p&gt;

&lt;p&gt;At Tapjoy, we&amp;rsquo;ve successfully ported portions of multiple Rails applications to Go services that run much more performantly. I have my eye on one particular area that I think could also benefit from a Go re-write. Aiming towards a working version of that application in Go in my spare time will be a great capstone for this entire learning process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be sure to check back next December for &amp;ldquo;5 Improved Strategies for Really Learning Go, This Time, I Swear, in 2018&amp;rdquo;.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rails Security Exercises from Bearclaw</title>
      <link>/dankleiman.github.io/2016/09/24/rails-security-exercises-from-bearclaw</link>
      <pubDate>Sat, 24 Sep 2016 06:05:49 -0400</pubDate>
      
      <guid>/dankleiman.github.io/2016/09/24/rails-security-exercises-from-bearclaw</guid>
      <description>

&lt;p&gt;In this post, I&amp;rsquo;m going to tell you what I learned doing a series of Rails security exercises developed by &lt;a href=&#34;https://www.gobearclaw.com/&#34;&gt;Bearclaw&lt;/a&gt;, a Rails security consultancy.&lt;/p&gt;

&lt;p&gt;Before I go into the exercises, though, I want to send a huge thank you to &lt;a href=&#34;https://twitter.com/alinajaf&#34;&gt;Ali Najaf&lt;/a&gt;, founder of Bearclaw. What I&amp;rsquo;ve learned here is due to the thoughtfulness of the exercises he&amp;rsquo;s put together and his willingness to try something new by sharing them with me. Normally these exercises are part of a workshop he leads in person.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;If you find anything in this article useful or interesting, please reach out to him and send your thanks!&lt;/p&gt;

&lt;h2 id=&#34;what-s-in-a-url&#34;&gt;What&amp;rsquo;s in a URL?&lt;/h2&gt;

&lt;p&gt;One of the first things I remember about learning Rails was how declarative the URL structure is for explaining the context of the resource you are viewing. For example, all your users will be viewable on the &lt;code&gt;/users&lt;/code&gt; page. A single user is viewable on the &lt;code&gt;/users/7&lt;/code&gt; page.&lt;/p&gt;

&lt;p&gt;We even had a running joke at my last job that none of the developers actually knew where anything was in the UI. Instead, we would all just type in URLs for whatever we wanted to view, because we knew which controllers and actions we were working on.&lt;/p&gt;

&lt;p&gt;Rails relies heavily on the convention that an HTTP action should match a standard URL structure and a standard place in the code where that action is handled. For example, from the &lt;a href=&#34;http://guides.rubyonrails.org/routing.html&#34;&gt;Rails routing guide&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a GET request to &lt;code&gt;/photos&lt;/code&gt; maps to the &lt;code&gt;photos#index&lt;/code&gt; controller action and you can expect a list of all photos&lt;/li&gt;
&lt;li&gt;a GET request to &lt;code&gt;/photos/new&lt;/code&gt; maps to the &lt;code&gt;photos#new&lt;/code&gt; controller action and you can expect to land on a form for creating a new photo&lt;/li&gt;
&lt;li&gt;a POST request to &lt;code&gt;/photos&lt;/code&gt; maps to the &lt;code&gt;photos#create&lt;/code&gt; controller action and it will create a new photo&lt;/li&gt;
&lt;li&gt;a GET request to &lt;code&gt;/photos/:id&lt;/code&gt; maps to the &lt;code&gt;photos#show&lt;/code&gt; controller action and you would expect that action to display a specific photo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, for a web framework to work at all, there has to be a concept of &amp;lsquo;routing&amp;rsquo; where web requests are mapped to program logic. If you know the Rails conventions for this mapping, when you start up an unfamiliar Rails app, you can often take a pretty good tour of the app, just by making some assumptions about the URLs you would expect to find.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;While I used to think of this as convenience and convention, now I see the flipside of this standardization: the more you follow the common patterns, the more I already know about the internals of your application.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In fact, the first exercise in this series drives home the point. Looking for &amp;ldquo;typical&amp;rdquo; Rails routes was all it took to exploit the app.&lt;/p&gt;

&lt;h2 id=&#34;can-you-keep-a-secret&#34;&gt;Can You Keep a Secret?&lt;/h2&gt;

&lt;p&gt;The goal of each of the exercises in the series is to find a &amp;ldquo;secret&amp;rdquo; &amp;ndash; a random based64 encoded string &amp;ndash; that&amp;rsquo;s displayed somewhere in the application. In each exercise, you have to compromise a different security mechanism to get access to the secret.&lt;/p&gt;

&lt;p&gt;Each exercise is its own small Rails app, so to get started, there&amp;rsquo;s a little set up to run it locally. Then, when you view it in the browser, you&amp;rsquo;re prompted to log in or create an account.&lt;/p&gt;

&lt;p&gt;For the first exercise, after you log in, there&amp;rsquo;s a navigation link to &amp;ldquo;Your Secret.&amp;rdquo; Clicking on that, guess what the URL is? Just like the photo example above, it&amp;rsquo;s the straightforward Rails URL, so if you go to &lt;code&gt;/secrets/39&lt;/code&gt;, you&amp;rsquo;re going to see the resource with that id.&lt;/p&gt;

&lt;p&gt;From there, all you have to do is match up the secret to the specific user secret (whose name is displayed on the secret page) that you&amp;rsquo;re after in the exercise. A little light scripting with something like &lt;a href=&#34;http://docs.seattlerb.org/mechanize/&#34;&gt;Mechanize&lt;/a&gt; lets you test a whole range of secret ids and confirm you are on the correct user&amp;rsquo;s page. And, that&amp;rsquo;s it, the app is compromised!&lt;/p&gt;

&lt;p&gt;Now, hang on, I know what you&amp;rsquo;re probably thinking. This is not a real Rails vulnerability and no one would be stupid enough to let all their user data sit out at exposed endpoints with no authorization checks. Fair point.&lt;/p&gt;

&lt;p&gt;But that&amp;rsquo;s what is so cool about this series&amp;hellip;.You feel like you&amp;rsquo;re interacting with a real application, but the exercises are contrived in a way to make each attack vector clear.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this case, the app had a glaring weakness that forced you to think through URL manipulation to expose data.&lt;/strong&gt; It was a warm-up, graded &amp;lsquo;easy&amp;rsquo; &amp;mdash; there are more complex ones, all the way up to &amp;lsquo;diabolical&amp;rsquo;!&lt;/p&gt;

&lt;h2 id=&#34;next&#34;&gt;Next!&lt;/h2&gt;

&lt;p&gt;Expanding on the notion that the URL reveals information about the system resources, the next exercise exposes a password reset field on the &lt;code&gt;/users/:id/edit&lt;/code&gt; page. Whoops!&lt;/p&gt;

&lt;p&gt;Not only can you get a sense for how many user records are in the database, but if you visited all the edit pages one-by-one, you could easily set all the user passwords to whatever you liked.&lt;/p&gt;

&lt;p&gt;Since I knew the id of the user I had just created, a simple for loop &amp;ndash; from 1 to my user id &amp;ndash; was all it took to set everyone&amp;rsquo;s password to &amp;lsquo;password&amp;rsquo;. Then I could log in as the user whose information I was after.&lt;/p&gt;

&lt;p&gt;Again, is this typically how password resets work? Of course not!&lt;/p&gt;

&lt;p&gt;But due to the design of the exercise, I learned that sometimes you can get at a particular target by compromosing all the data.&lt;/p&gt;

&lt;h2 id=&#34;time-for-some-self-promotion&#34;&gt;Time for Some Self-Promotion&lt;/h2&gt;

&lt;p&gt;The set up for the next exercise hinted that managers had access to special information that regular users did not. When I thought about Rails apps I had worked on in the past, one of the simplest contrivances to separate special users from regular users was to set &lt;code&gt;admin: true&lt;/code&gt; on a user account.&lt;/p&gt;

&lt;p&gt;Often, the admin-ing of a user is done through a superuser set-up script or directly in the database, which I didn&amp;rsquo;t have access to here. Ultimately, though, the admin flag is just an attribute of the user, so if I could find a way to add in additional info about my user, maybe I could promote myself to admin?&lt;/p&gt;

&lt;p&gt;Yes, out-of-the-box Rails will guard against accepting user input on any model attribute via whitelisting what is changeable for any given action, but maybe&amp;hellip;&lt;/p&gt;

&lt;p&gt;It turned out, in this vulnerable little app, I could happily suggest attributes to edit on my own user edit page, beyond name and email. When I submited the form on &lt;code&gt;/users/:id/edit&lt;/code&gt;, I could send along some HTML that added one more form field, setting &lt;code&gt;user[&#39;admin&#39;]&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. The controller action, it turned out, did not whitelist which attributes it would accept in the edit action, and I became an admin.&lt;/p&gt;

&lt;p&gt;In this particular challenge, I had to apply the same concept again, weaving my way through other attributes and associations, until I was the admin for a particular group of users, one of which had the info that I needed to solve the challenge.&lt;/p&gt;

&lt;p&gt;Each time, the changes were a combination of iterating through resource ids as we did in the previous challenges and altering the information with additional HTML embedded in the user edit form.&lt;/p&gt;

&lt;p&gt;Very interesting to note here that editing the form HTML can be done easily in the browser, with all other authentication mechanisms already in place. In other words, I logged in as a valid user, verified by a session in the application, and sent requests that would have otherwise followed all the &amp;ldquo;rules&amp;rdquo; of the app &amp;ndash; I just happened to throw in some extra data.&lt;/p&gt;

&lt;h2 id=&#34;little-bobby-tables-learns-javascript&#34;&gt;Little Bobby Tables Learns Javascript&lt;/h2&gt;

&lt;p&gt;This next one really stoked the growing feeling I had that I was getting away with something devious and delicious all at the same time.&lt;/p&gt;

&lt;p&gt;Now, we weren&amp;rsquo;t blowing up a database with SQL injection, but it was a similar idea:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://imgs.xkcd.com/comics/exploits_of_a_mom.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;I learned that any time you let a user enter unescaped HTML, you run the risk of letting malicious code into your application. I mean, I guess I knew that in theory, but in this exercise, I learned how to actually do it&amp;hellip;and it felt good!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how the attack could work.&lt;/p&gt;

&lt;p&gt;If there is a field in a form somewhere that accepts any HTML tags, a user could enter something like &lt;code&gt;&amp;lt;h1&amp;gt;This is an H1 you were not expecting!&amp;lt;/h1&amp;gt;&lt;/code&gt; and now, anywhere that the field is displayed, whoever is viewing it will have a nice big H1 in the middle of their page.&lt;/p&gt;

&lt;p&gt;So far, that doesn&amp;rsquo;t seem so bad&amp;hellip;but the fact that one user can create input that shows up for another user in this way is critical to understanding the problem.&lt;/p&gt;

&lt;p&gt;Next, instead of page styling, let&amp;rsquo;s throw in some javascript. If the input isn&amp;rsquo;t sanitized, meaning we haven&amp;rsquo;t been explicit about which tags are allowed or not allowed from users, or we&amp;rsquo;ve outright converted the tags into harmless strings, then something like &lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;whoops, this should never happen!&#39;);&amp;lt;/script&amp;gt;&lt;/code&gt; could totally happen.&lt;/p&gt;

&lt;p&gt;Now, a little alert isn&amp;rsquo;t going to hurt anybody, but remember how any other user will see whatever we put into that field? Since we can include a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, we can use javascript to manipulate the page and scrape anything else that&amp;rsquo;s on other user&amp;rsquo;s page, like account information or user data.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the part that I found extra devious: &lt;strong&gt;How do we retrieve the information we maliciously scrape from another user&amp;rsquo;s page?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;See that XKCD comic a couple of paragraphs up? Do you know where I got it? I mean the actual embedded image? Right here:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;http://imgs.xkcd.com/comics/exploits_of_a_mom.png&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not hosting that image. I&amp;rsquo;m requesting it from xkcd.com. And if I owned xkcd.com, I would look in my server logs and see a request come in for:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/comics/exploits_of_a_mom.png&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I would also see a request come in for:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/comics/exploits_of_a_mom.png?foo=bar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/comics/exploits_of_a_mom.png?secret-user-data=here&amp;amp;is&amp;amp;the&amp;amp;account&amp;amp;balance&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In other words, it&amp;rsquo;s easy to request the image resource itself or any other valid url at the domain, plus any other random data stuffed into the querystring params.&lt;/p&gt;

&lt;p&gt;When you roll all this up into some evil user input, the script tag will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scrape some data on a page where I expect the input to be displayed.&lt;/li&gt;
&lt;li&gt;Create a fake &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag to be inserted into the DOM&lt;/li&gt;
&lt;li&gt;Set the source of the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; as a URL that I control, with a querystring param that includes the scraped data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, when someone renders the page with my input in place, I will steal their data and ship it off to my server. So evil! So clever!&lt;/p&gt;

&lt;h2 id=&#34;fear-not-or-do&#34;&gt;Fear Not&amp;hellip;Or Do?&lt;/h2&gt;

&lt;p&gt;As I&amp;rsquo;ve tried to point out several times, following Rails conventions pretty much ensures you are protected from accidentally allowing any of these exploits to slip into your app. This is not an article about Rails vulnerabilities.&lt;/p&gt;

&lt;p&gt;Instead, I&amp;rsquo;m hoping you&amp;rsquo;ll ponder this: a web application is &lt;strong&gt;valuable&lt;/strong&gt; because it can gather data and then display it. A web framework is &lt;strong&gt;easy to use and maintain&lt;/strong&gt; as a developer because it follows strong conventions.&lt;/p&gt;

&lt;p&gt;Doing these Rails security exercises has flipped these tenets around for me.&lt;/p&gt;

&lt;p&gt;Now it feels like a web application is &lt;strong&gt;dangerous&lt;/strong&gt; because it can gather data and then display it. A web framework is &lt;strong&gt;easy interrogate and exploit&lt;/strong&gt; because it follows strong conventions.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t quite know how to reconcile these perspectives, but having gone through these exercises, I&amp;rsquo;m sure I will now be a little more cautious, a little more skeptical, and hopefully, a little safer as a developer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nice Try, NilClass</title>
      <link>/dankleiman.github.io/2016/04/10/nice-try-nilclass</link>
      <pubDate>Sun, 10 Apr 2016 07:13:27 -0400</pubDate>
      
      <guid>/dankleiman.github.io/2016/04/10/nice-try-nilclass</guid>
      <description>

&lt;p&gt;I love that feeling when a new concept starts to come together in your mind and you can point to all the converging sources of insight.&lt;/p&gt;

&lt;p&gt;Right now, I can&amp;rsquo;t tell if I&amp;rsquo;m fooling myself, hiding some logic, or making my code more readable with this particular concept, but when I put together these three pieces of information, I think I start to see something emerge.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been inspired to do some more digging into these kinds of questions lately thanks to the awesome new &lt;a href=&#34;http://rubybookclub.com/&#34;&gt;Ruby Book Club Podcast&lt;/a&gt;. Co-hosts &lt;a href=&#34;http://twitter.com/nodunayo&#34;&gt;Nadia Odunayo&lt;/a&gt; and &lt;a href=&#34;http://twitter.com/saronyitbarek&#34;&gt;Saron Yitbarek&lt;/a&gt; are leading us chapter-by-chapter through different Ruby books and sharing their thoughts on the podcast as they go.&lt;/p&gt;

&lt;p&gt;This week, specifically, I came across:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Damir Svrtan&amp;rsquo;s article about &lt;a href=&#34;https://infinum.co/the-capsized-eight/articles/whitelisting-with-the-lesser-known-presence-in-method&#34;&gt;whitelisting input with #presence_in in Rails&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.confidentruby.com/&#34;&gt;Avdi Grimm&amp;rsquo;s Confident Ruby&lt;/a&gt; where #fetch is used to pull data out of hash.&lt;/li&gt;
&lt;li&gt;A work situation, we were cleaning up #present? checks on incoming params input using #presence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I still don&amp;rsquo;t know exactly what to call this collection of methods, but they all feel very related to me. They all remind me of &lt;a href=&#34;http://apidock.com/rails/v4.2.1/Object/try&#34;&gt;#try&lt;/a&gt;, which makes me nervous.&lt;/p&gt;

&lt;p&gt;Using #try always feels like a little bit of a crutch, where you don&amp;rsquo;t quite know what inputs you are expecting or haven&amp;rsquo;t coded thoroughly to all your cases, but in Rails, #try swallows some of the errors you would have run into and returns nil instead.&lt;/p&gt;

&lt;p&gt;With these three methods, we&amp;rsquo;re doing something similar. In each case, we get a simple way to check for a value and handle missing values gracefully with defaults, moving forward if the value is present.&lt;/p&gt;

&lt;p&gt;So, for #presence, instead of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
params[:name].blank? ? params[:name] : nil

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
params[:name].presence

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For whitelisting, instead of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
if params[:name].present? &amp;amp;&amp;amp; %w(foo bar).include?(params[:name])
  params[:name]
else
  nil
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use #presence_in like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
params[:name].presence_in %w(foo bar)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, with #fetch, the only Ruby standard library method in this group (the rest come from Rails), you have a few different options. Lifted straight from &lt;a href=&#34;http://ruby-doc.org/core-2.2.0/Hash.html#method-i-fetch&#34;&gt;the docs&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
h = { &amp;quot;a&amp;quot; =&amp;gt; 100, &amp;quot;b&amp;quot; =&amp;gt; 200 }
h.fetch(&amp;quot;a&amp;quot;)                            #=&amp;gt; 100
h.fetch(&amp;quot;z&amp;quot;, &amp;quot;go fish&amp;quot;)                 #=&amp;gt; &amp;quot;go fish&amp;quot;
h.fetch(&amp;quot;z&amp;quot;) { |el| &amp;quot;go fish, #{el}&amp;quot;}   #=&amp;gt; &amp;quot;go fish, z&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With #fetch, you use a key to puull a value from the hash, but you now you can define a default as your second argument, which is used to rescue missing key errors. Even better, you can execute whole block in the case that your key is not there.&lt;/p&gt;

&lt;h2 id=&#34;bonus-reading&#34;&gt;Bonus Reading&lt;/h2&gt;

&lt;p&gt;I went digging a little more because I was still feeling uneasy about #try, but I couldn&amp;rsquo;t quite articulate why. Guess who I found to say it for me? &lt;a href=&#34;http://devblog.avdi.org/2011/07/05/demeter-its-not-just-a-good-idea-its-the-law/&#34;&gt;Here&amp;rsquo;s Avdi from 2011 on Structural Coupling enabled by #try&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The seed of this all-too-common predicament is structural coupling. What’s structural coupling? To
define it, let’s start with a review of the DRY principle:&lt;/p&gt;

&lt;blockquote&gt;&#34;Every piece of knowledge must have a single, unambiguous, authoritative representation within the system.&#34;&lt;/blockquote&gt;

&lt;p&gt;It’s easy to think about DRYness just in terms of data: e.g., there should be only one place in the
system for API keys; they shouldn’t just be copy-and-pasted willy-nilly throughout the codebase. But
DRY applies equally to structural knowledge: knowledge about the composition of and relationships
between your objects.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the code we started out with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def user_info(user)
  &amp;quot;Name: #{user.name}. Dept: #{user.department.try(:name)}&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This seemingly innocuous code makes the following assumptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;user will have a name property.&lt;/li&gt;
  &lt;li&gt;user may or may not have a single department.&lt;/li&gt;
  &lt;li&gt;user&#39;s department, in turn, has a name property&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By going two levels deep into user&#39;s associations, we’ve made a structural coupling between this code and the models it works with. We’ve duplicated knowledge about a User’s associations—canonically located in the User and Department classes—in the #user_info method.&lt;/p&gt;

&lt;p&gt;&lt;p&gt;And the #try method was an enabler. By papering over the ugly user.department &amp;amp;&amp;amp; user.department.name construct we’d otherwise have had to use, #try made the coupling an easier syntactical pill to swallow.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;I highly recommend you read the whole article, as he goes into how this coupling violates the Law of Demeter and links back to &lt;a href=&#34;http://devblog.avdi.org/2011/06/28/do-or-do-not-there-is-no-try/&#34;&gt;an earlier discussion of #try&lt;/a&gt;, because, clearly, while these types of methods are cool and convenient, they make him a little uneasy too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrating Posts and Pages from Wordpress to Jekyll</title>
      <link>/dankleiman.github.io/2016/03/11/migrating-posts-and-pages-from-wordpress-to-jekyll</link>
      <pubDate>Fri, 11 Mar 2016 13:55:15 -0500</pubDate>
      
      <guid>/dankleiman.github.io/2016/03/11/migrating-posts-and-pages-from-wordpress-to-jekyll</guid>
      <description>&lt;p&gt;&lt;em&gt;This is Part 1 in a series on &lt;a href=&#34;dankleiman.github.io/blog/2016/03/09/migrating-from-wordpress-to-jekyll/&#34;&gt;Migrating from Wordpress to Jekyll&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The documentation for &lt;a href=&#34;https://jekyllrb.com/docs/quickstart/&#34;&gt;getting started with Jekyll&lt;/a&gt; is great. I&amp;rsquo;m not going to rehash everything that&amp;rsquo;s covered there.&lt;/p&gt;

&lt;p&gt;Instead, this post and the others in the series will be more like, &amp;ldquo;here&amp;rsquo;s the order I wish I had done things in&amp;rdquo; or &amp;ldquo;here&amp;rsquo;s everything I ended up needing to pull together to get stuff working&amp;rdquo;. I hope it helps you and saves you time if you ever decide to do a similar migration from a self-hosted Wordpress install to Jekyll.&lt;/p&gt;

&lt;p&gt;So here we go&amp;hellip;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;migrating-posts-and-pages&#34;&gt;Migrating Posts and Pages&lt;/h2&gt;

&lt;p&gt;To migrate your existing posts and pages from Wordpress, here&amp;rsquo;s what you need to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Install Jekyll&lt;/strong&gt; and create a new instance in the directory of your choice (follow the commands &lt;a href=&#34;https://jekyllrb.com/docs/quickstart/&#34;&gt;here&lt;/a&gt; &amp;ndash; you can even run &lt;code&gt;jekyll serve&lt;/code&gt; to see the boilerplate of the site you just created).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Export a copy of your Wordpress database&lt;/strong&gt; (I was on WPEngine and they have a good explanation of &lt;a href=&#34;https://wpengine.com/support/exporting-database/&#34;&gt;how to export from phpMyAdmin&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;If you don&amp;rsquo;t have it already, &lt;strong&gt;you will need mysql installed&lt;/strong&gt; to work with the Wordpress database &amp;ndash; using homebrew you can &lt;code&gt;brew install mysql&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a new database&lt;/strong&gt; through your mysql console and use the source command to load the .sql file you exported in step 2: that&amp;rsquo;s &lt;code&gt;mysql -u root&lt;/code&gt; to acces the console, then &lt;code&gt;CREATE DATABSE whatever_you_want_to_call_your_wordpress_db&lt;/code&gt; to create a new database, &lt;code&gt;use whatever_you_want_to_call_your_wordpress_db&lt;/code&gt; to start using the database, and finally, &lt;code&gt;source the_file_you_exported.sql&lt;/code&gt; to load all the data.&lt;/li&gt;
&lt;li&gt;Now we&amp;rsquo;re ready to use the &lt;strong&gt;Jekyll Importer for Wordpress&lt;/strong&gt;. You&amp;rsquo;ll need a few more gems installed to be able to read from mysql (&lt;a href=&#34;http://import.jekyllrb.com/docs/wordpress/&#34;&gt;see importer docs&lt;/a&gt;), but then, with a local copy of your Wordpress database, the import will be pretty straightforward.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inspect your new Jekyll posts and pages&lt;/strong&gt;: the import will dump all your Wordpress posts into a directory called &amp;lsquo;_posts&amp;rsquo;. I don&amp;rsquo;t know what this will look like if your Wordpress permalink structure does not have the YYYY-MM-DD-post-title format, but Jekyll relies on this date format when generating your site. In other words, an html file like this: &amp;lsquo;/_posts/2016-03-11-migrating-wordpress-posts-and-pages.html&amp;rsquo; will be turned into a page at &lt;a href=&#34;http://your-domain.com/some-category/2016/03/11/migrating-wordpress-posts-and-pages.html&#34;&gt;http://your-domain.com/some-category/2016/03/11/migrating-wordpress-posts-and-pages.html&lt;/a&gt;. You can ultimately tweak the permalinks, but the actually page generation seems to rely on the date format in the source post file name.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;a-note-about-pages&#34;&gt;A Note about Pages&lt;/h2&gt;

&lt;p&gt;If you had a lot of pages in Wordpress, you will find that the import has created directories named after these pages in the root directory of your Jekyll install. Inside each of these directories is an index.html (or whatever you specified in the importer, i.e. md) file with the actual html content from your Wordpress site.&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t completely decided what to do with these pages for my site yet. In some cases, they are no longer relevant because they reference features of the site I won&amp;rsquo;t be supporting in this &amp;ldquo;archive&amp;rdquo; version of the old site.&lt;/p&gt;

&lt;p&gt;In other cases, though, they contain content that could have easily been a post. For these post-worthy pages, I am moving them to the &amp;lsquo;_posts&amp;rsquo; directory, changing the file name of the index.html file to use the date specificied in the YAML front matter generated by the importer (probably the published date of the page) and the name of the directory, so: index.html inside of &amp;lsquo;/some-great-page&amp;rsquo; that was published on 2014-05-31 becomes &amp;lsquo;/_posts/2014-05-31-some-great-page.html&amp;rsquo;. I like this approach because now when you build your site, Jekyll will automatically add this page to the list of posts in the correct chronological order.&lt;/p&gt;

&lt;p&gt;Either way, I plan to minimalize the number of &amp;lsquo;page&amp;rsquo; directories in the root of the site and use the conventions built up around posts in Jekyll to deliver as much of the content as possible (see below on categories and tags, for example).&lt;/p&gt;

&lt;h2 id=&#34;categories-and-tags&#34;&gt;Categories and Tags&lt;/h2&gt;

&lt;p&gt;Jekyll has some handy &lt;a href=&#34;https://jekyllrb.com/docs/variables/&#34;&gt;global variables&lt;/a&gt; built in that allow you to group posts together and display them and generally reference attributes about your site and its contents.&lt;/p&gt;

&lt;p&gt;Specifically, as I was thinking about how to structure the new site, I was wondering about different ways to group posts together, based on the categories I had used in the Wordpress site, instead of just displaying one long reverse-chronological list.&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&#34;https://codinfox.github.io/dev/2015/03/06/use-tags-and-categories-in-your-jekyll-based-github-pages/&#34;&gt;this excellent post on extending some basic layouts to take advantage of categories&lt;/a&gt;. Incidentally, hosting on Github Pages, which I plan to do, limits the number of Jekyll plugins you can use, but that&amp;rsquo;s fine with me.&lt;/p&gt;

&lt;p&gt;Taking the approach from the article above, if you want to show all Tai Chi posts on one page, you create a page called &amp;lsquo;Tai Chi Articles&amp;rsquo; and set its category as &amp;lsquo;Tai Chi&amp;rsquo;. You specify the layout as &amp;lsquo;category&amp;rsquo;, which you build in your &amp;lsquo;_layouts&amp;rsquo; directory.&lt;/p&gt;

&lt;p&gt;In the new layout, you are iterating through all the posts and checking for a match to the category specified on the page that uses that layout.&lt;/p&gt;

&lt;p&gt;In other words, on the &amp;lsquo;Tai Chi Articles&amp;rsquo; page, you are iterating through all posts that have the category &amp;lsquo;Tai Chi&amp;rsquo; and linking to them in this list. And I keep having to remind myself, this happens during the build, so you generate a nice, quick-loading page!&lt;/p&gt;

&lt;p&gt;With my categories set up and pages repurposed as posts or eliminated, I felt like I was making good progress on the migration.&lt;/p&gt;

&lt;p&gt;Of course, questions about redirection from the pages I converted or deleted and styling and layout started to fill my head&amp;hellip;but we&amp;rsquo;re going to get to that in future articles!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migrating from Wordpress to Jekyll</title>
      <link>/dankleiman.github.io/2016/03/09/migrating-from-wordpress-to-jekyll</link>
      <pubDate>Wed, 09 Mar 2016 13:09:18 -0500</pubDate>
      
      <guid>/dankleiman.github.io/2016/03/09/migrating-from-wordpress-to-jekyll</guid>
      <description>&lt;p&gt;So, I&amp;rsquo;ve decided to migrate my &lt;a href=&#34;http://dankleiman.com&#34;&gt;Tai Chi site at dankleiman.com&lt;/a&gt; from Wordpress to a new static site using Jekyll.&lt;/p&gt;

&lt;p&gt;Since I haven&amp;rsquo;t posted there in almost two years, but I get a steady stream of new subscribers who want to learn about Tai Chi, qigong, and meditation, I thought it would be good to give the 300+ pages and posts a more evergreen feel.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The switch from Wordpress to Jekyll is exciting for me because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I get to learn a new framework that&amp;rsquo;s in line with tools I use every day, like Ruby and git.&lt;/li&gt;
&lt;li&gt;I can deliver existing content to new users quickly and easily with plain html.&lt;/li&gt;
&lt;li&gt;The content on the site deserves a fresh coat of paint and likely some re-writing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I begin to play with the different components for the migration from Wordpress to Jekyll, it seems like the project will break down into the following areas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;dankleiman.github.io/blog/2016/03/11/migrating-posts-and-pages-from-wordpress-to-jekyll/&#34;&gt;Migrating Posts and Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Migrating Assets&lt;/li&gt;
&lt;li&gt;Grooming/Revisiting Existing Content&lt;/li&gt;
&lt;li&gt;Site Look and Feel&lt;/li&gt;
&lt;li&gt;Handling Form Submission&lt;/li&gt;
&lt;li&gt;DNS and Redirection&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I plan to write about each of these areas and link to each topic as I publish more about the different decisions and steps that go into each part of the migration process.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>I Hate Voicemail: Straight to SMS with Twilio</title>
      <link>/dankleiman.github.io/2015/09/15/i-hate-voicemail-straight-to-sms-with-twilio</link>
      <pubDate>Tue, 15 Sep 2015 08:02:19 -0400</pubDate>
      
      <guid>/dankleiman.github.io/2015/09/15/i-hate-voicemail-straight-to-sms-with-twilio</guid>
      <description>&lt;p&gt;I hate checking my voicemail. I hate the nagging voicemail icon on my phone that won&amp;rsquo;t be dismissed unless I actually check my voicemail. I hate how listening to a voicemail, capturing relevant information from it, and calling someone back breaks up the normal flow of how I communicate with people all day long: asynchronously, via written communication like email or text.&lt;/p&gt;

&lt;p&gt;These days, when I want to talk to someone, we plan a time to talk and that&amp;rsquo;s fine. But some people still call and leave me a black-box-of-a-voicemail that I have to wade into.&lt;/p&gt;

&lt;p&gt;I needed some way to cut voicemail out of my life&amp;hellip;so I hooked up a Twilio app to handle it for me.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;no-more-voicemail-basic-flow&#34;&gt;No More Voicemail: Basic Flow&lt;/h2&gt;

&lt;p&gt;Instead of having to call in to my voicemail, what if I could get as much relevant info as possible sent right to my phone, right away? There are probably times when actually listening to the message is necessary, so that has to be factored in too.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the basic flow I set out to create:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Someone calls and I don&amp;rsquo;t answer.&lt;/li&gt;
&lt;li&gt;They are prompted to leave a message as they would normally expect to do.&lt;/li&gt;
&lt;li&gt;The message is recorded.&lt;/li&gt;
&lt;li&gt;The recording is transcribed.&lt;/li&gt;
&lt;li&gt;The transcription is sent to me as a text message, with a link to the recording.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now I am happy, because I get just about all the information I need from a text. Plus, I have the assurance that if the transcription is incomplete, because voice-to-text is still not perfect, I can listen to the recording.&lt;/p&gt;

&lt;h2 id=&#34;twilio-and-sinatra-for-message-flow&#34;&gt;Twilio and Sinatra for Message Flow&lt;/h2&gt;

&lt;p&gt;To code this up, I used a similar set up to the &lt;a href=&#34;dankleiman.github.io/blog/2015/08/13/sms-to-do-list-with-twilio/&#34;&gt;To Do List app&lt;/a&gt; I built earlier.&lt;/p&gt;

&lt;p&gt;There are three main controller actions in the Sinatra app that the handle an incoming call, record the message, and then send it to me as a text:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# incoming forwarded call
post &#39;/calls&#39; do
  user = User.find_by_phone_number!(params[:ForwardedFrom] || params[:CalledVia])
  Twilio::TwiML::Response.new do |r|
    if greeting = user.messages.current_greeting
      r.Play greeting.recording_url
    else
      r.Say &#39;Please leave a message after the beep.&#39;
    end
    r.Redirect &#39;/record_message&#39;
  end.text
end

# record incoming message
post &#39;/record_message&#39; do
  Twilio::TwiML::Response.new do |r|
    r.Record transcribeCallback: &#39;/messages&#39;, timeout: 30, playBeep: true
  end.text
end

# callback for incoming forwared call
post &#39;/messages&#39; do
  if user = User.find_by_phone_number!(params[:ForwardedFrom] || params[:CalledVia])
    # save recording url, generate pin for message
    message = user.messages.create(pin: Message.generate_pin_for(user), recording_url: params[:RecordingUrl], recording_sid: params[:RecordingSid])
    text = params[:TranscriptionText] || &#39;Unable to transcribe message&#39;
    body = [&amp;quot;FROM: #{params[:Caller] || params[:From]}&amp;quot;,
            &amp;quot;MSG: #{text}&amp;quot;,
            &amp;quot;CALL TO LISTEN: +18001231234&amp;quot;,
            &amp;quot;MSG PIN: #{message.pin}&amp;quot;].join(&amp;quot;\n&amp;quot;)
    client = Twilio::REST::Client.new ENV[&#39;TWILIO_ACCOUNT_ID&#39;], ENV[&#39;TWILIO_AUTH&#39;]
    client.account.messages.create(body: body, to: user.phone_number, from: params[:To])
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. Calls get recorded and forwarded to me and the caller leaves a voicemail just like they intended to do.&lt;/p&gt;

&lt;p&gt;Here are a few things I learned with this new Twilio use case.&lt;/p&gt;

&lt;h2 id=&#34;leave-a-greeting&#34;&gt;Leave a Greeting&lt;/h2&gt;

&lt;p&gt;In the &amp;lsquo;/calls&amp;rsquo; block, instead of just the robo-voice that Twilio defaults to prompting the caller to leave a message, I wanted to be able to play a custom greeting.&lt;/p&gt;

&lt;p&gt;When you use the Record verb in Twilio, they will save the recording for you, so I just needed to save the url that points to that resource and the unique id of the recording, in case I want to go back and clean it up later.&lt;/p&gt;

&lt;p&gt;To allow for a custom greeting, I built a separate flow to actually record the outgoing greeting. When I call to check my message, I get a prompt that allows me to record a new greeting.&lt;/p&gt;

&lt;p&gt;To play the greeting to my callers, I then looking up the number the call has been forwarded from and play the custom greeting if there is one.&lt;/p&gt;

&lt;h2 id=&#34;skinny-controllers-really-skinny&#34;&gt;Skinny Controllers, Really Skinny&lt;/h2&gt;

&lt;p&gt;As I was building out the custom greeting, I ran into a timeout issue when playing the greeting and recording the call in the same action.&lt;/p&gt;

&lt;p&gt;I have to look into this more, but Twilio seems to have a really small size limit on the response. Super small controller actions as a constraint makes me think that any complex application logic is going to lots of extra controller actions.&lt;/p&gt;

&lt;p&gt;Whatever my next project is, I&amp;rsquo;ll need to think about the best design to keep the Sinatra app from being tons of seeming unrelated actions.&lt;/p&gt;

&lt;h2 id=&#34;transcription-callback&#34;&gt;Transcription Callback&lt;/h2&gt;

&lt;p&gt;The &amp;lsquo;/messages&amp;rsquo; action, where the app actually sends me the text, is hit as a callback from the transcribeCallback option on Record.&lt;/p&gt;

&lt;p&gt;This is pretty cool, because once the caller records their message, their interaction with the app is done. Twilio then takes the recording, runs the voice-to-text transcription, and posts the attributes of the transcription to &amp;lsquo;/messages&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&#34;https://www.twilio.com/docs/api/twiml/record&#34;&gt;Twilio API Record docs&lt;/a&gt;, you get the following parameters in the callback:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TranscriptionSid: The unique 34 character ID of the transcription.&lt;/li&gt;
&lt;li&gt;TranscriptionText: Contains the text of the transcription.&lt;/li&gt;
&lt;li&gt;TranscriptionStatus: The status of the transcription attempt: either &amp;lsquo;completed&amp;rsquo; or &amp;lsquo;failed&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;TranscriptionUrl: The URL for the transcription&amp;rsquo;s REST API resource.&lt;/li&gt;
&lt;li&gt;RecordingSid: The unique 34 character ID of the recording from which the transcription was generated.&lt;/li&gt;
&lt;li&gt;RecordingUrl: The URL for the transcription&amp;rsquo;s source recording resource.&lt;/li&gt;
&lt;li&gt;CallSid: A unique identifier for this call, generated by Twilio.&lt;/li&gt;
&lt;li&gt;AccountSid: Your Twilio account id. It is 34 characters long, and always starts with the letters AC.&lt;/li&gt;
&lt;li&gt;From: The phone number or client identifier of the party that initiated the call. Phone numbers are formatted with a &amp;lsquo;+&amp;rsquo; and country code, e.g. +16175551212 ([E.164][e164] format). Client identifiers begin with the client: URI scheme; for example, for a call from a client named &amp;lsquo;tommy&amp;rsquo;, the From parameter will be client:tommy.&lt;/li&gt;
&lt;li&gt;To: The phone number or client identifier of the called party. Phone numbers are formatted with a &amp;lsquo;+&amp;rsquo; and country code, e.g. +16175551212 ([E.164][e164] format). Client identifiers begin with the client: URI scheme; for example, for a call to a client named &amp;lsquo;jenny&amp;rsquo;, the To parameter will be client:jenny.&lt;/li&gt;
&lt;li&gt;CallStatus: A descriptive status for the call. The value is one of queued, ringing, in-progress, completed, busy, failed or no-answer. See the CallStatus section for more details.&lt;/li&gt;
&lt;li&gt;ApiVersion: The version of the Twilio API used to handle this call. For incoming calls, this is determined by the API version set on the called number. For outgoing calls, this is the API version used by the outgoing call&amp;rsquo;s REST API request.&lt;/li&gt;
&lt;li&gt;Direction: A string describing the direction of the call. inbound for inbound calls, outbound-api for calls initiated via the REST API or outbound-dial for calls initiated by a &lt;Dial&gt; verb.&lt;/li&gt;
&lt;li&gt;ForwardedFrom: This parameter is set only when Twilio receives a forwarded call, but its value depends on the caller&amp;rsquo;s carrier including information when forwarding. Not all carriers support passing this information.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;checking-messages&#34;&gt;Checking Messages&lt;/h2&gt;

&lt;p&gt;Once the message comes through, I get a text with a (hopefully) coherent message, and a fallback option to call in and listen to the record.&lt;/p&gt;

&lt;p&gt;Right now, I have the very &lt;em&gt;cough cough&lt;/em&gt; secure combination of a &amp;ldquo;from&amp;rdquo; phone number and &amp;ldquo;message PIN&amp;rdquo; to authenticate against in order to play the message.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s going to be interesting to think more about securing Twilio-related resources in future projects, but for now, this seems to work.&lt;/p&gt;

&lt;p&gt;So call me. Or don&amp;rsquo;t. I can handle it either way now!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Text Me When You&#39;re Done: Twilio for Notifications of Long-Running Dev Tasks</title>
      <link>/dankleiman.github.io/2015/08/29/text-me-when-youre-done-twilio-for-notifications-of-long-running-dev-tasks</link>
      <pubDate>Sat, 29 Aug 2015 10:33:48 -0400</pubDate>
      
      <guid>/dankleiman.github.io/2015/08/29/text-me-when-youre-done-twilio-for-notifications-of-long-running-dev-tasks</guid>
      <description>&lt;p&gt;This week at work, we ran into a slight hiccup with one of our larger third-party data syncs. Without going into too much detail, to fix the issue, we had to carefully reproduce data in various states and test fixes that would transform that data back to the correct state &amp;ndash; or for the purpose of this post, &lt;em&gt;I spent a lot of time this week setting things up and waiting for them to run&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Outside of work I&amp;rsquo;ve been continuing to play with Twilio and this morning, with hours of data prep still in front of me, I stumbled across this article on &lt;a href=&#34;https://www.twilio.com/labs/bash/sms&#34;&gt;Sending a Twilio SMS from the Shell&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Before I get into how this works and what I did, I was also reading some of Patrick McKenzie&amp;rsquo;s old posts on his first Twilio apps. What got me excited this morning was &lt;a href=&#34;http://www.kalzumeus.com/2011/12/19/productizing-twilio-applications/&#34;&gt;something he wrote as an addendum to his TwilioConf talk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I now consider it my mission statement for all my Twilio projects:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2 id=&#34;why-i-think-twilio-will-take-over-the-world&#34;&gt;Why I Think Twilio Will Take Over The World&lt;/h2&gt;

&lt;p&gt;(This was not actually in the presentation, because I didn’t have enough time for it, but I sincerely believe it and want to publish it somewhere.)&lt;/p&gt;

&lt;p&gt;I think Twilio is, far and away, the most exciting technology I’ve ever worked with. The world needs cat photos, local coupons, and mobifotosocial games, too, but it needs good telephony systems a lot more, as evidenced by companies paying billions of dollars for them.&lt;/p&gt;

&lt;p&gt;Additionally, Twilio is the nascent, embryonic form of the first Internet that a billion people are going to have access to, because &lt;strong&gt;Twilio turns every phone into a smartphone&lt;/strong&gt;.  The end-game for Zynga’s take-over-the-world vision is the human race slaved to artificial dopamine treadmills.  The endgame for Twilio’s vision is that every $2 handset in Africa is the moral equivalent of an iPhone.  I know which future I want to support.&lt;/p&gt;

&lt;p&gt;Smartphones aren’t smart because of anything on the phones themselves, they’re smart because they speak HTTP and thus get always-on access to a universe of applications which are improving constantly.  Twilio radically reduces the amount of hardware support a phone needs to speak HTTP — it retroactively upgrades every phone in the world to do so.  After that, all you need is the application logic.  And what application logic there is — because the applications live on web servers, they have access to all the wonderful infrastructure built to run the Internet, from APIs that let you get Highly Consequential Data like e.g. weather reports or stock prices or whatever, to easy integration with systems which were never built to have a phone operating as part of them.&lt;/p&gt;

&lt;p&gt;You can’t swing a stick in a business without hitting a problem which a phone application makes great sense for.  I filled up three pages of a notebook with them in just a week after being exposed to Twilio for the first time.  Order status checking for phone/fax/mail orders.  Integrated CRMs for phone customer service representatives.  Flight information.  Bank balances.  Server monitoring.  Appointment reminders. Restaurant reservations.  Local search.  Loyalty programs.  Time card systems.  Retail/service employee support systems.  Shift management.  The list goes on and on and on.&lt;/p&gt;

&lt;p&gt;Seriously, &lt;strong&gt;start writing Twilio apps&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks, Patrick!&lt;/p&gt;

&lt;h2 id=&#34;twilio-sms-via-shell&#34;&gt;Twilio SMS via Shell&lt;/h2&gt;

&lt;p&gt;Up to this point, I had been thinking of Twilio as a way to tie SMS, either as input or output, to web-based application logic. When I came across the shell script that would also hit Twilio to send SMS, though I realized that chaining a Twilio SMS to a long-running script would allow me to set up and job and just walk away. I&amp;rsquo;ll get a text when it&amp;rsquo;s done. Awesome!&lt;/p&gt;

&lt;p&gt;At it&amp;rsquo;s core, the script is a curl request to the Twilio API:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;RESPONSE=`curl -fSs -u &amp;quot;$ACCOUNTSID:$AUTHTOKEN&amp;quot; -d &amp;quot;From=$CALLERID&amp;quot; -d &amp;quot;To=$PHONE&amp;quot; -d &amp;quot;Body=$MSG&amp;quot; &amp;quot;https://api.twilio.com/2010-04-01/Accounts/$ACCOUNTSID/SMS/Messages&amp;quot; 2&amp;gt;&amp;amp;1`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest of the script takes care of arguments and configuration &amp;ndash; even allowing you to create a separate config file with your Twilio credentials. Pretty sweet to have such a nice neat package! &lt;a href=&#34;https://www.twilio.com/labs/bash/sms&#34;&gt;Here&amp;rsquo;s everything you need to get it running&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;integrating-tasks-with-the-script&#34;&gt;Integrating Tasks with the Script&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve played with a few different alerts so far.&lt;/p&gt;

&lt;p&gt;When I had to load a large file full of sql data, a simple alert when the job was done did the trick:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql -u root databasename &amp;lt; some/file.sql; echo &#39;Your table is ready&#39; | ~/twilio-sms 6178675309
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I was deciding how to break up the file into more manageable smaller files to import, and running around doing errands and walking my dog, just calculating the number of lines took long enough that I piped the result out to the Twilio script and got a text that said 34218:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wc -l &amp;lt; some/file.sql | ~/twilio-sms 6178675309
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s nothing earth-shatteringly-amazing technically here. It&amp;rsquo;s really about peace of mind.&lt;/p&gt;

&lt;p&gt;Now, I don&amp;rsquo;t have to keep looking over my shoulder to check if the task is done. Or waste time checking Twitter while I sit at my computer. I can go do more useful things, like finish this blog post, confident that the text notification will be enough to get my attention when the job is done running.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMS To Do List with Twilio</title>
      <link>/dankleiman.github.io/2015/08/13/sms-to-do-list-with-twilio</link>
      <pubDate>Thu, 13 Aug 2015 19:45:40 -0400</pubDate>
      
      <guid>/dankleiman.github.io/2015/08/13/sms-to-do-list-with-twilio</guid>
      <description>&lt;p&gt;The other day, I had the pleasure of talking to someone who builds mobile apps with people in developing countries so that community health workers can deliver medical information and collect data.&lt;/p&gt;

&lt;p&gt;As were talking about the technical challenges and logistical challenges (provisioning hundreds of mobile phones and numbers in one go in a country where you have no presence, e.g.), I have a pretty clear mental model of a basic CRUD app distilled down to Android&amp;hellip;and then he said something that changed how I thought about the entire problem:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some of their programs are limited to SMS-only communication.&lt;/strong&gt; No smartphones, no apps, just text.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;How do you go about guiding someone through a decision tree or collecting form submissions via SMS?&lt;/p&gt;

&lt;p&gt;By coincidence, I had just started reading &lt;a href=&#34;https://pragprog.com/book/dccar2/build-awesome-command-line-applications-in-ruby-2&#34;&gt;a book about building command line apps&lt;/a&gt; and I think that&amp;rsquo;s how the lightbulb went off for me.&lt;/p&gt;

&lt;p&gt;As a developer, I spend a lot of time in front of a command prompt. Many of the more experienced devs I know wouldn&amp;rsquo;t want to touch anything other than the command line to do the bulk of their work &amp;ndash; &lt;strong&gt;and they are navigating an application interface largely built around entering a single text command at a time&lt;/strong&gt;, just like our SMS-constrained health workers.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Build Awesome Command-Line Applications in Ruby 2&lt;/em&gt;, one of the first sample projects is a to do list app, from the command line.&lt;/p&gt;

&lt;p&gt;Your basic set up allows you to add items to the list, retrieve the whole list, and mark items as complete. As I was building it out, I also wanted to delete things, because I found that more satisfying.&lt;/p&gt;

&lt;p&gt;Once the idea of an interactive SMS app and the command line to do list fused in my head, I thought it would be fun to write a simple, somewhat interactive program that was all SMS-based.&lt;/p&gt;

&lt;h2 id=&#34;twilio-for-easy-sms-integration&#34;&gt;Twilio for Easy SMS Integration&lt;/h2&gt;

&lt;p&gt;Twilio is a service that allows you to send and receive voice and SMS through their API. They have awesome documentation for a bunch of different languages and great small project tutorials like the one I was about to tackle.&lt;/p&gt;

&lt;p&gt;I stumbled across &lt;a href=&#34;https://www.twilio.com/blog/2014/10/broadcast-text-and-picture-messages-using-ruby-google-spreadsheets-twilio.html&#34;&gt;this one about sending out baby announcements&lt;/a&gt; as I was working and I found it very useful. I was all on board with the google-sheets-as-backend until I got past reading and started trying to write to the sheet. That was too complex for this little project!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Diving into Twilio, all I had to do was set up a web endpoint to receive messages and write some simple code to generate a reply.&lt;/strong&gt; That&amp;rsquo;s it, one controller action!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what I used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.twilio.com/blog/2014/02/twilio-on-rails-integrating-twilio-with-your-rails-4-app.html&#34;&gt;Set up twilio and Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.twilio.com/blog/2013/10/test-your-webhooks-locally-with-ngrok.html&#34;&gt;Get your local endpoints online with Ngrok&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Write your application logic in the Rails app, just like you were receiving and responding to any normal web request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It really is that easy to get started. In all honesty, I did try to poke at the problem from a non-Rails angle for a little bit at first, but I wanted to focus on the Twilio side of things instead. Note to self: I&amp;rsquo;m getting too comfortable with Rails conventions!&lt;/p&gt;

&lt;h2 id=&#34;one-web-endpoint&#34;&gt;One Web Endpoint&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s the controller I wrote to handle incoming messages from the Twilio API and respond with TwiML, Twilio&amp;rsquo;s own version of XML:&lt;/p&gt;

&lt;p&gt;```ruby Message Controller
class MessagesController &amp;lt; ApplicationController
  def index
    initialize_command(params)
    twiml = Twilio::TwiML::Response.new do |r|
      r.Message @command.execute ? @command.response : &amp;lsquo;Sorry something went wrong&amp;rsquo;
    end
    render text: twiml.text
  end&lt;/p&gt;

&lt;p&gt;private&lt;/p&gt;

&lt;p&gt;# build a message and command from incoming params that can be executed to deliver the response
  def initialize_command(message)
    message = Message.new(params)
    @command = begin
      &amp;ldquo;#{message.command.capitalize}Command&amp;rdquo;.constantize.new(message)
    rescue
      HelpCommand.new(message)
    end
  end
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The twilio-ruby gem give you wrappers for the response object, so there&#39;s not a lot of heavy lifting to be done.

Responding to Commands
----------------------

In command line apps, you get a limited number of valid options and a rigid structure to follow when you&#39;re executing commands -- something along the lines of [command] [flags] [arguments].

Here, I wanted to follow a similar convention, at least as far as separating the commands from the message that was being sent.

When I talked to app developer about SMS-based form submission, he said they basically rely on the same thing. **You have to develop a convention for setting apart your commands or your form field identifiers from the data that is being sent.**

We serialize data for web requests all the time, the only difference is that here we need to guide the user into compliance with those conventions because they just have a big text box.

For starters, I decided that I would:

- adopt a convetion of commands coming first, surrounded by * characters on each side, followed by the message
- use &amp;quot;help&amp;quot; command as a catch-all to rescue any user input that didn&#39;t follow the command/message convention
- write helpful, specific prompts for each valid command to ensure that a user always gets a reply and that the reply to invalid commands leads them towards valid ones

To model the command/response structure, I copied a pattern we&#39;ve used often at work: start with a base class that to initialize the command objects, then create subclasses for each command that all know how to &amp;quot;execute&amp;quot; and &amp;quot;respond&amp;quot;.

Inside the &amp;quot;execute&amp;quot; and &amp;quot;response&amp;quot; methods, you can then define unique behavior for each command, but in the controller code above, for example, you simple have to make calls like &amp;quot;command.execute&amp;quot; and &amp;quot;command.response.&amp;quot;

So, for example, when I parse a message that looks like this

&amp;gt;\*new\* add something to the list

a NewCommand object is created. When it&#39;s executed, the new to do list item is saved to the database, and the response is returned, telling the user that their new to do list task has been added.

```ruby New Command
class NewCommand &amp;lt; Command

  def execute
   @item = Item.new(item_options)
   @item.save!
  end

  def response
    &amp;quot;Task added: #{@item.description}&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If they want to see a list of all their items, they just need to text&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;*list*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and the ListCommand responds with a list of their items or a prompt to add something if there aren&amp;rsquo;t any items:&lt;/p&gt;

&lt;p&gt;```ruby List Command
class ListCommand &amp;lt; Command&lt;/p&gt;

&lt;p&gt;def execute
    @list = Item.where(from: @message.from).order(:created_at)
  end&lt;/p&gt;

&lt;p&gt;def response
    if @list.empty?
      &amp;ldquo;Looks like you haven&amp;rsquo;t added anything yet. Create a new item with &lt;em&gt;new&lt;/em&gt; followed by the item description.&amp;rdquo;
    else
      items = []
      @list.each_with_index do |item, index|
        list = &amp;ldquo;#{index + 1}: #{item.description}&amp;rdquo;
        if item.completed_at.present?
          list += &amp;ldquo;, (Completed: #{item.completed_at.to_date})&amp;rdquo;
        end
        items &amp;lt;&amp;lt; list
      end
      items.join(&amp;lsquo;, &amp;lsquo;)
    end
  end&lt;/p&gt;

&lt;p&gt;end
```&lt;/p&gt;

&lt;p&gt;I also built out commands to mark items as complete and remove them from your to do list. Both take integer messages that correspond to the number of the item you get back from the list command.&lt;/p&gt;

&lt;p&gt;So this command would remove the second item on your list:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;*remove* 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;debugging-twilio-apps&#34;&gt;Debugging Twilio Apps&lt;/h2&gt;

&lt;p&gt;One of the trickiest parts of even doing this simple app was figuring a good way to debug.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; Twilio has some sandbox features, but at $00.0075 per message, I wasn&amp;rsquo;t too concerned about cost. It was more an issue of figuring out the best way to test input, return values from methods and objects, and visualize the whole request/response cycle, since it is different than the usual web flow I&amp;rsquo;m used to.&lt;/p&gt;

&lt;p&gt;A couple of things I found helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating a view to render the response for the controller, so instead of sending the response back to the texter through Twilio, I could view and debug output locally in the browser&lt;/li&gt;
&lt;li&gt;Reading the Twilio error logs &amp;ndash; they have very clear inbound and outbound message logs that give you insight into the headers, parameters, and bodies of the requests and responses in your app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://apidock.com/rails/ActiveSupport/CoreExtensions/Hash/to_query&#34;&gt;to_query&lt;/a&gt; to turn params hashes into query strings that I could add to my urls in the browser during local testing, especially because this is a typical incoming request query string:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;/messages?ToCountry=US&amp;amp;ToState=MA&amp;amp;SmsMessageSid=SMe40c71a5a09f1bad9ff702fce90b1d9d&amp;amp;NumMedia=0&amp;amp;ToCity=ROXBURY&amp;amp;FromZip=1096&amp;amp;SmsSid=SMe40c71a5a09f1bad9ff702fce90b1d9d&amp;amp;FromState=MA&amp;amp;SmsStatus=received&amp;amp;FromCity=BOSTON&amp;amp;Body=*list*FromCountry=US&amp;amp;To=8573992266&amp;amp;ToZip=1097&amp;amp;NumSegments=1&amp;amp;MessageSid=SMe40c71a5a09f1bad9ff702fce90b1d9d&amp;amp;AccountSid=AC428abc24c52ac55ff5cd98b68bd6a5e7&amp;amp;From=7811234567&amp;amp;ApiVersion=2010-04-01&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;check-out-the-code&#34;&gt;Check out the Code&lt;/h2&gt;

&lt;p&gt;If you want to see more, &lt;a href=&#34;https://github.com/dankleiman/sms_todo&#34;&gt;here&amp;rsquo;s the code&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>10 of My Favorite Talks from RailsConf 2015</title>
      <link>/dankleiman.github.io/2015/04/29/10-of-my-favorite-talks-from-railsconf-2015</link>
      <pubDate>Wed, 29 Apr 2015 20:47:31 -0400</pubDate>
      
      <guid>/dankleiman.github.io/2015/04/29/10-of-my-favorite-talks-from-railsconf-2015</guid>
      <description>&lt;p&gt;RailsConf 2015 was a blast. There were talks on a such a wide range of topics, that I wanted to capture some of my favorites here.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s my Top 10 Countdown from the conference:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll try to update as many of these as possible with video if/when they become available. For now, I&amp;rsquo;ve tried to gather as many slide decks as possible.&lt;/p&gt;

&lt;ol reversed&gt;
  &lt;li&gt;
    &lt;strong&gt;Designing a Great Ruby API - How We&#39;re Simplifying Rails 5&lt;/strong&gt;
    &lt;p&gt;At times this one was over my head technically, but it was awesome to see a core contributor breaking down the process of how the inner workings of Rails are built.&lt;/p&gt;
    &lt;p&gt;Sean is a presenter and was hanging out between talks fielding questions too.&lt;/p&gt;
    &lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;2a56dba370414cd1a48d1aa43d8fffab&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Playing Games in the Clouds&lt;/strong&gt;
    &lt;p&gt;&lt;a href=&#34;https://twitter.com/nodunayo&#34;&gt;Nadia Odunayo&lt;/a&gt; gets my award for Best Explanation by Analogy. Her talk captured at a high level how concepts from Game Theory concepts can be applied to allocating resources in distributed systems&lt;/p&gt;
    &lt;p&gt;Very cool!&lt;/p&gt;
    &lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;46080b095191416dbc21ba9e9ec8084e&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
     &lt;strong&gt;What&#39;s Happening in Your Rails App?&lt;/strong&gt;
     &lt;p&gt;Introduction to Introspection Features of Ruby&lt;/p&gt;
     &lt;p&gt;Koichi Sasada is a member of the Ruby core team and works on &#34;Matz&#39;s Team&#34; at Heroku. He said, &#34;I&#39;m not actually a Rails developer, but my wife is, so she&#39;s my customer.&#34;&lt;/p&gt;
     &lt;p&gt;This was another talk where the inner workings of technology we use every day are exposed...by the people actively maintaining them. I think that&#39;s so cool to see.&lt;/p&gt;
     &lt;p&gt;Also, check out his definition of Event Driven Development.&lt;/p&gt;
     &lt;iframe width=&#34;815&#34; height=&#34;458&#34; src=&#34;https://www.youtube.com/embed/4YtBS0tvkjw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;The World of Rails Security&lt;/strong&gt;
    &lt;p&gt;When &lt;a href=&#34;https://twitter.com/presidentbeef&#34;&gt;Justin Collins&lt;/a&gt; broke down Rails security into &#34;What Rails Provides,&#34; &#34;What Rails Doesn&#39;t Provide,&#34; and &#34;What to Do About It.&#34; Security seems like a Rubik&#39;s cube issue. You can look at it, and try to break it, from so many different angles.&lt;/p&gt;
    &lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;05e09bab40404a61a4d6b844109d84f3&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Processes and Threads - Resque vs. Sidekiq&lt;/strong&gt;
    &lt;p&gt;&lt;a href=&#34;http://jdabbs.com/&#34;&gt;James Dabbs&lt;/a&gt; gave an awesome live demo of the internals of Resque vs. Sidekiq. Not only was it a pleasure to watch him fly through the code and take us right in to key points that differentiate these two job enqueing tools, but if you head over to his Gitub, you can actually run the same tests that he demoed in the talk:&lt;/p&gt;
    &lt;p&gt;&lt;a href=&#34;https://github.com/jamesdabbs/railsconf-2015&#34;&gt;Code&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;&lt;a href=&#34;https://github.com/jamesdabbs/railsconf-2015/blob/master/slides.md&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Why Your New API Product Will Fail&lt;/strong&gt;
    &lt;p&gt;Despite evidence to the contrary, this talk was not about writing your API at the last minute:&lt;/p&gt;
    &lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Probably about time I wrote this talk...&lt;/p&gt;&amp;mdash; Scott Feinberg (@scottefein) &lt;a href=&#34;https://twitter.com/scottefein/status/590878954568974336&#34;&gt;April 22, 2015&lt;/a&gt;&lt;/blockquote&gt;
  &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
    &lt;p&gt;Update: Here are Scott&#39;s slides:&lt;/p&gt;
    &lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;045b214b36734c1f8d2bd90396059073&#34; data-ratio=&#34;1.29456384323641&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
    &lt;p&gt;The big takeaway from Scott&#39;s talk was very simple: your API is an interface that other developers will use AND so is &lt;strong&gt;your API documentation&lt;/strong&gt;. When these suck, user experience, and user happiness, really suffers too.&lt;/p&gt;

    &lt;p&gt;Scott dove into a lot of the tooling he&#39;s used to automate API documentation, but to think the job is just about tooling is another pitfall. You should care about every place people interact with your application. Even his automated solutions, he said, began with a lot of manual trial and error.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Keynote by Aaron Patterson&lt;/strong&gt;
    &lt;p&gt;From a man who really doesn&#39;t need an introduction to be worth watching:&lt;/p&gt;
    &lt;iframe width=&#34;815&#34; height=&#34;458&#34; src=&#34;https://www.youtube.com/embed/B3gYklsN9uc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
    &lt;p&gt;I just want to know if that part in the middle was staged or not.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Keynote by DHH&lt;/strong&gt;
    &lt;p&gt;&lt;em&gt;This video is almost 9 hours long, capturing the whole first day of the conference in the main room. Jump to about 24 minutes to catch the beginning of DHH&#39;s Keynote&lt;/em&gt;&lt;/p&gt;
    &lt;p&gt;What I found most inspiring about this talk was the attitude that Rails can provide leverage. As a framework, a set of tools, individuals and small groups can write applications at web scale that do amazing things.&lt;/p&gt;
    &lt;iframe width=&#34;815&#34; height=&#34;458&#34; src=&#34;https://www.youtube.com/embed/oMlX9i9Icno&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Voila, Indexes!&lt;/strong&gt;
    &lt;p&gt;A Look at Some Simple Preventative Magick&lt;/p&gt;
    &lt;p&gt;This talk is a real treat. Not only does &lt;a href=&#34;https://twitter.com/jamis&#34;&gt;Jamis Buck&lt;/a&gt; explain difficult database concepts in simple language, he does it through telling a story, and illustrates it!&lt;/p&gt;
    &lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;3b907bc997094b91ac9d578c41df8ce7&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;strong&gt;Nothing is Something&lt;/strong&gt;

    &lt;iframe width=&#34;815&#34; height=&#34;458&#34; src=&#34;https://www.youtube.com/embed/OMPfEXIlTVE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

    &lt;p&gt;I had the pleasure of seeing Sandi Metz speak at Burlington Ruby Conference in August, 2014 and I remember leaving pumped and inspired to code for the long haul. This time she was just as inspiring, but she also took us through some core object oriented programming concepts.&lt;/p&gt;

    &lt;p&gt;But what I love about hearing Sandi speak is the way she imbues the teaching in her talks with a sense of purpose and urgency. Like DHH&#39;s talk above, I felt fired up to code. Like Jamis&#39; talk, she made it easy to absorb complex concepts. Most of all, though, she creates this powerful undercurrent of community and warmth that makes you feel like we&#39;re all going to do this together. What an amazing teacher!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Parachuting into Unfamilar Code</title>
      <link>/dankleiman.github.io/2015/01/11/parachuting-into-unfamilar-code</link>
      <pubDate>Sun, 11 Jan 2015 20:15:27 -0500</pubDate>
      
      <guid>/dankleiman.github.io/2015/01/11/parachuting-into-unfamilar-code</guid>
      <description>&lt;p&gt;We have hundreds of models in our codebase at &lt;a href=&#34;http://www.trialnetworks.com&#34;&gt;TrialNetworks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a new developer, the first 12 features I was asked to work on didn’t touch the same parts of the code. In terms of learning our product, I think that was good, but without some serious “orienteering” practice, it was also confusing and frustrating.&lt;/p&gt;

&lt;p&gt;I felt like I was being pushed out of a plane in the middle of the night, with a backpack full of gear, a tiny map, and some night vision goggles, and I was told to rendezvous in 6 hours in a place I’d never heard of before.&lt;/p&gt;

&lt;p&gt;In fact, I still get this feeling, every time I’m asked to work on a new module in our platform.&lt;/p&gt;

&lt;p&gt;So when you jump out of the plane, how do you land, get your bearings, and complete the mission?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I’m sure there are other ways to do it, but here’s my current strategy.&lt;/p&gt;

&lt;h2 id=&#34;start-at-the-end&#34;&gt;Start at the End&lt;/h2&gt;

&lt;p&gt;The paratrooper analogy is about to break down on us, but when I’m working on a feature, even if I somewhat understand what the problem is at the database level, or what new controller actions we will most likely create, I’ve found it easiest to get my bearings by &lt;strong&gt;starting with the view&lt;/strong&gt; – or the interaction that the user will have.&lt;/p&gt;

&lt;p&gt;When you start with the view, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See how the software is currently functioning&lt;/li&gt;
&lt;li&gt;Note what additional screens, tabs, links, buttons, or data need to be rendered&lt;/li&gt;
&lt;li&gt;Break open the code and look at how the current interface is being generated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you get to the last step, and you’re in the code, exploring how we are rendering something, you start to work up strategies for tackling the problem.&lt;/p&gt;

&lt;p&gt;In an existing codebase, other people have left clues. You see assumptions about how they arrived at generating the current behavior and your next steps are revealed.&lt;/p&gt;

&lt;h2 id=&#34;tracing-someone-else-s-path&#34;&gt;Tracing Someone Else’s Path&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Start tracing the path backwards from the url.&lt;/strong&gt; In Rails, there are strong conventions about which controllers and which actions are generating the view you are looking at.&lt;/p&gt;

&lt;p&gt;Armed with the url, you know which controller is routing data to the view you are working on. As you start to see which models are being used in the view, you can further construct the path.&lt;/p&gt;

&lt;p&gt;At this point, I like to change analogies again.&lt;/p&gt;

&lt;p&gt;Who (which models) showed up to the party (the view), and who’s throwing the party (which controller/action)?&lt;/p&gt;

&lt;p&gt;I build a sort of working guest list for the party and start to think about &lt;strong&gt;who I want to talk to and who I will ignore.&lt;/strong&gt;  Narrowing in on the behavior you are going to modify or figuring out where you want to insert new behavior is like working the room until you find the right place to hang out.&lt;/p&gt;

&lt;h2 id=&#34;what-you-bring-to-the-party&#34;&gt;What You Bring to the Party&lt;/h2&gt;

&lt;p&gt;At this point I really don’t know what analogy to go with, but once I’ve found my spot in the room, I can relax a little.&lt;/p&gt;

&lt;p&gt;See, I know I’ve ruled out 98% of the codebase in terms of things I will have to touch to get this feature done.&lt;/p&gt;

&lt;p&gt;Back when we were jumping out of the plane, I was worried. I didn’t know the terrain at all. Before I looked at the view, it could have been any of the tens of thousands of lines of code that needed to be touched to make it work.&lt;/p&gt;

&lt;p&gt;Now, I know where I am. I’m in the right room, in the right mansion, at the right party…&lt;em&gt;do the analogies hold together better if I had jumped out of the plane in a tuxedo, like some James Bond-esque super spy???&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In any case, now the focus is incredibly narrow. Most of the time, we’re not only in the right controller, but it becomes clear that a specific controller action needs to be tweaked, or a new one needs to be added.&lt;/p&gt;

&lt;p&gt;From here, I like to &lt;strong&gt;pseudo-code the behaviors I want.&lt;/strong&gt; Pseudo-coding, as I learned it, was more or less writing a series of comments that kind of look like code, but act more like a step-by-step guide for what you want to accomplish.&lt;/p&gt;

&lt;p&gt;The benefits of pseudo-coding are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I can write it a lot faster than I can if I’m stopping to check if every line is working&lt;/li&gt;
&lt;li&gt;I can have a “complete thought” in the pseudo-code without stopping to dig around and see if a similar method has been implemented somewhere else&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bonus:&lt;/strong&gt; completing the thought also acts like a sounding board. It either confirms that I am in the right place, taking the right approach, or gives me new insight into how to create the feature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From pseudo-code, you can work out the nuts and bolts of implementing the feature, but the task is pretty well, i.e. narrowly, defined at that point and you usually only end up writing a few lines of code.&lt;/p&gt;

&lt;p&gt;In fact, I think I’m starting to see that if in the end you aren’t writing small amounts of code in a narrowly defined scope, you haven’t worked the room enough to find the right spot…but I have a feeling I’ll be arguing for or against that assertion more in future posts.&lt;/p&gt;

&lt;h2 id=&#34;hoofing-it-back-to-the-rendezvous-point&#34;&gt;Hoofing it back to the Rendezvous Point&lt;/h2&gt;

&lt;p&gt;We got in, completely our mission, and got out. The final (haha!) stage of the process is the extraction moment. As you’re being plucked off the ground and back into the sky, you get a final bird’s-eye view of the code.&lt;/p&gt;

&lt;p&gt;Either this is a moment of satisfaction, as you survey your work, or someone comes along and pushes you out of the plane again, to redo the whole mission.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Coding Bootcamp ROI 3 Weeks Later</title>
      <link>/dankleiman.github.io/2014/08/11/coding-bootcamp-roi-3-weeks-later</link>
      <pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/dankleiman.github.io/2014/08/11/coding-bootcamp-roi-3-weeks-later</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been 3 weeks since I graduated from &lt;a href=&#34;http://www.launchacademy.com&#34;&gt;Launch Academy&lt;/a&gt; and I start work at a new job on Wednesday as a software developer.&lt;/p&gt;

&lt;p&gt;Obviously, I&amp;rsquo;m thrilled with this whirlwind process, and coming off almost ten years in my last job, the pace of all this change is a little hard to grasp.&lt;/p&gt;

&lt;p&gt;In this post, I want to tell you why Launch was such a great investment for me. If you&amp;rsquo;re considering doing something similar, I hope you find this helpful.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First Disclaimer:&lt;/strong&gt; The opinions I am going to share about other bootcamps are all second or third hand accounts. I haven&amp;rsquo;t researched them, but I will share them with as told to me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second Disclaimer:&lt;/strong&gt; For perspective, Launch Academy has close to 100% placement rate for job seekers, on a 3-month timescale. I consider myself incredibly fortunate to have landed a job on a &amp;ldquo;best case&amp;rdquo; timeline. YMMV.&lt;/p&gt;

&lt;h2 id=&#34;7-reasons-launch-academy-was-a-great-investment&#34;&gt;7 Reasons Launch Academy was a Great Investment&lt;/h2&gt;

&lt;p&gt;In no particular order, here&amp;rsquo;s why it was a great investment for me to quit my job, change careers, and spend a large chunk of money on a coding bootcamp:&lt;/p&gt;

&lt;p&gt;** 1. Structured Curriculum**&lt;/p&gt;

&lt;p&gt;At every step of the process, the material was laid out incrementally. Nothing was introduced before we needed to use it &amp;ndash; simple tools to match our stage of learning, more complex as the simple tools bumped up against their limitations.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s where some of the rumors come into play. Several of the companies that have repeatedly hired from Launch Academy told me that, compared to other bootcamps they looked at, Launch had the more organized and structured curriculum. As an educator, this was really obvious to me, but if the hiring partners are noticing it too, clearly it has an impact on the skill level of the graduates.&lt;/p&gt;

&lt;p&gt;** 2. Andragogy**&lt;/p&gt;

&lt;p&gt;Pedagogy is for children. Andragogy is learning structured &lt;em&gt;for adults&lt;/em&gt;. Our first books in the pre-work curriculum weren&amp;rsquo;t about code, they were about learning. Studying the way our brain processes information was really informative. But even better than knowing about learning, the day at Launch was strucutured to match the cycles of cognitive work and rest (integration).&lt;/p&gt;

&lt;p&gt;I found just as important as what we were learning.&lt;/p&gt;

&lt;p&gt;** 3. Dedicated Instructors**&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another one I was baffled by. In some places, the instructors rotate in and out after a single cohort.&lt;/p&gt;

&lt;p&gt;At Launch, the small group of instructors (one for every seven of us) has been together for several iterations and I didn&amp;rsquo;t get the feeling anyone was going anywhere. Not only do they meet daily to reflect, tweak, and refine the curriculum, but there is a clear sense of ownership, from group to group.&lt;/p&gt;

&lt;p&gt;They want to improve how they teach and make the experience better for each group that comes through the program.&lt;/p&gt;

&lt;p&gt;How would you do that if there&amp;rsquo;s constant staff turnover?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Caring Classmates&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know if we just got lucky or they have some magical formula for attracting awesome people, but the folks I went through the program with were consistently caring, interested in each other and each other&amp;rsquo;s work, and hardworking.&lt;/p&gt;

&lt;p&gt;Plus, we had a lot of fun!&lt;/p&gt;

&lt;p&gt;There was never a moment was someone was too busy to help someone else or talk an idea through.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s so cool to think about the way I will likely cross paths again and again over the years with these people in the software world. I would work with any of them on tough projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Killer Career Services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Part of the business model is to get us jobs. To that end, we got coaching on everything from resumes, to interviews, assessing work culture, shaping our portfolio projects, and honing our presentation skills to become more effective job seekers.&lt;/p&gt;

&lt;p&gt;But that&amp;rsquo;s kind of a narrow description of &amp;ldquo;career services&amp;rdquo; at Launch.&lt;/p&gt;

&lt;p&gt;Remember, coding bootcamps have emerged out of an industry need, in the short term, for junior-level talent.&lt;/p&gt;

&lt;p&gt;At Launch, they take a longer view and realize that they are creating a new pathway, outside of traditional educational models. Obviously that means explaining to hiring partners what graduates can do, but they are also working with companies to reshape how they see the lifetime of their employees&amp;rsquo; education.&lt;/p&gt;

&lt;p&gt;Apprenticeships, for example, are emerging as a natural next step to bootcamp immersion. Launch is actively advising companies about how to implement these kinds of programs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Thriving (and Welcoming) Community&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For almost a year now, I&amp;rsquo;ve been attending &lt;a href=&#34;http://bostonrb.org&#34;&gt;Boston Ruby&lt;/a&gt; meetings.&lt;/p&gt;

&lt;p&gt;Even before I was involved in Launch Academy, people were friendly and open to meeting someone with zero experience.&lt;/p&gt;

&lt;p&gt;You had to jump on the meetup tickets right away because they often sold out. I don&amp;rsquo;t know how many people are actively involved, but I think they cap most events at 150.&lt;/p&gt;

&lt;p&gt;Between live meetings, a google group, and twitter, you can get all kinds of help, recommendations, and keep track of new developments if you want to lurk like I did.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;thought&lt;/em&gt; I was lucky to be in Boston, but it turns out, I was lucky to find Ruby&amp;hellip;where tons of interested people from all over want to make programming interesting and enjoyable. Case in point: my recent experience at &lt;a href=&#34;dankleiman.github.io/blog/2014/08/03/burlington-ruby-conference-2014/&#34;&gt;Burlington Ruby Conference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Established Network&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This last one is really a combination of several of the earlier points.&lt;/p&gt;

&lt;p&gt;I was able to get a job right away because of the established network Launch Academy participates in.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what I mean by &amp;ldquo;established network:&amp;rdquo; The founders are avid Rubyists who worked for years to build the Boston Ruby community. Past alums have thrived in their jobs and companies are eager to hire more from the program. The staff is constantly forging new partnerships (close to 100 companies have hired from Launch at this point). And the instructors care about preparing us and seeing us succeed.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;network&amp;rdquo; is an ever-evolving, ever-expanding, thriving thing that I&amp;rsquo;m proud to be part of in a whole new way now.&lt;/p&gt;

&lt;h2 id=&#34;multifaceted-roi&#34;&gt;Multifaceted ROI&lt;/h2&gt;

&lt;p&gt;So, like I said at the beginning, I&amp;rsquo;m writing this with a ton of bias, some second or third hand information, and I start my first job in two days. Just by the numbers, I will be earning more than I was before and my potential to earn more has risen dramatically. The ROI on this endeavor is solid.&lt;/p&gt;

&lt;p&gt;Most of all, though, I&amp;rsquo;m still riding on the wave of being a student. I&amp;rsquo;m in &amp;ldquo;learning mode&amp;rdquo; and I&amp;rsquo;m thrilled to have found somewhere to work where this will be encouraged.&lt;/p&gt;

&lt;p&gt;I hope to report back here and share the upsides of ongoing learning and growth. Thanks for reading!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Burlington Ruby Conference 2014</title>
      <link>/dankleiman.github.io/2014/08/03/burlington-ruby-conference-2014</link>
      <pubDate>Sun, 03 Aug 2014 06:24:53 -0400</pubDate>
      
      <guid>/dankleiman.github.io/2014/08/03/burlington-ruby-conference-2014</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s 6:23 on Sunday morning, day 2 at &lt;a href=&#34;http://burlingtonrubyconference.com/&#34;&gt;Burlington Ruby&lt;/a&gt;, so I thought I&amp;rsquo;d take a few minutes and recap some of what I saw and learned yesterday.&lt;/p&gt;

&lt;p&gt;Everyone keeps talking about what an amazing community we have in the Ruby world and I guess I&amp;rsquo;m spoiled since I don&amp;rsquo;t have any other software communities to compare it to, but I can tell you that every talk has been thoughtful, curious, and in different ways caring: caring about the future of the language, caring about other people&amp;rsquo;s growth and development, and caring even about novel, smarter, and more refined approaches to getting things done.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;In his keynote to kick off the conference, &lt;a href=&#34;http://erniemiller.org/&#34;&gt;Ernie Miller&lt;/a&gt; did a pretty amazing job capturing these core themes. I don&amp;rsquo;t know how much people realized it, but he subtly set the tone for all the other talks too, both in terms of the human side of software development, but he also gave us context for all the non-Ruby or Ruby-divergent topics people were dying to discuss. Very impressive!&lt;/p&gt;

&lt;p&gt;Here are a few of the ideas from the talks that jumped out at me.&lt;/p&gt;

&lt;h2 id=&#34;how-you-work-with-other-people&#34;&gt;How You Work with Other People&lt;/h2&gt;

&lt;p&gt;Having just come out of Launch Academy, I was really interested to hear what &lt;a href=&#34;http://jennifereliuk.com/about/&#34;&gt;Jennifer Eliuk&lt;/a&gt; had to say about apprenticeships.&lt;/p&gt;

&lt;p&gt;While her talk definitely resonanted with me and helped me see &amp;ldquo;the next step&amp;rdquo; in my coding journey, she made a strong case for the importance of apprenticeships for the community at large.&lt;/p&gt;

&lt;p&gt;Apprenticeships, for code school graduates or self-taught coders, have the potential to become a criticial rung on the software development ladder because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;companies can groom and develop their junior talent, without all of the performance pressure of the day-to-day job.&lt;/li&gt;
&lt;li&gt;mentorship and teaching becomes a rewarding way for senior developers to grow in non-technical dimensions.&lt;/li&gt;
&lt;li&gt;a teaching culture also encourages learning &amp;ndash; she cited cases where she and senior devs would tackle new technologies side by side where everyone was learning together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At Launch Academy, the staff and instructors were gradually and deliberately refining each piece of the learning process, not unlike the way they taught us to tackle complex software problems. Jennifer&amp;rsquo;s talk was a perfect example of how to more broadly apply those same principles to the question: &amp;ldquo;how do we cultivate developers.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;In fact, she argues, now that so much effort is being poured into the initial stage of learning, like code schools and weekend intro events or online curricula, we have to be more thoughtful about the next incremental step between kickoff and a dev career.&lt;/p&gt;

&lt;h2 id=&#34;how-you-write-for-other-people&#34;&gt;How You Write for Other People&lt;/h2&gt;

&lt;p&gt;Along the lines of incremental improvement and developing people, &lt;a href=&#34;http://nicolefenton.com/&#34;&gt;Nicole Fenton&lt;/a&gt; pushed everyone think hard about how their apps get users what they need.&lt;/p&gt;

&lt;p&gt;Specifically, how do the &amp;ldquo;strings&amp;rdquo; or &amp;ldquo;micro-copy&amp;rdquo; or small cues and instructions that guide someone through a piece of software actually help them or are they just robotic, systems-focused, impersonal, confusing signposts.&lt;/p&gt;

&lt;p&gt;One example she shared was from Square, when you send someone money. The confirmation email you receive basically says &amp;ldquo;You sent So-and-So $50.&amp;rdquo; Simple, right?&lt;/p&gt;

&lt;p&gt;Well, she had plenty of counter-examples that would have been equivalent to &amp;ldquo;We have received your request to transfer funds to user XXXX. We are accessing the database to store your request and &amp;hellip;..typically processing time for this request&amp;hellip;.&amp;rdquo; Or something full of jargon and procedures that are necessary from the software&amp;rsquo;s point of view but completely irrelevant to the goal the user is trying to accomplish.&lt;/p&gt;

&lt;p&gt;So, the next time you write copy for a button, an error message, or a confirmation, ask yourself, &amp;ldquo;what was the user trying to do and where do they need/want to go next? Am I helping them along that path in a way they&amp;rsquo;ll understand?&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;how-you-build-for-other-people&#34;&gt;How You Build for Other People&lt;/h2&gt;

&lt;p&gt;Both &lt;a href=&#34;http://danluchi.com/&#34;&gt;Dan Luchi&lt;/a&gt; and &lt;a href=&#34;http://alanpeabody.com/&#34;&gt;Alan Peabody&lt;/a&gt; grappled with what I&amp;rsquo;m coming to understand as the Rails identity crisis: &lt;em&gt;with an increase in mobile usage and connection speeds that enable heavier lifting client-side, what&amp;rsquo;s a server-side web framework to do?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The answer a lot of people are turning to, is that Rails is a powerful way to work with data and serve up an API that any front end view can consume.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve even heard people advocating for further decoupling functionality within Rails apps, so that each service serves its own API to the others, which seems to have advantages for maintainability and deployment.&lt;/p&gt;

&lt;p&gt;In these talks, though, the focus was mostly on getting a Rails backend to support and interact smoothly (and quickly) with whatever frontend &amp;ndash; mobile or web &amp;ndash; the user chooses.&lt;/p&gt;

&lt;p&gt;Alan explained some of the challenges and solutions he&amp;rsquo;s come up with for optimizing these connections and Dan gave us some great guidlines around functionality when deciding the best structure for building an app, like &lt;a href=&#34;http://www.ticketzen.com/&#34;&gt;Ticket Zen&lt;/a&gt;, the parking ticket payment app I hope I never have to use.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>